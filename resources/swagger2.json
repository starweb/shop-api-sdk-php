{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "starwebapi@starweb.se",
      "name": "Starweb API support",
      "url": "https://www.starweb.se/starweb-api"
    },
    "description": "This API is only allowed to be used by partners of Starweb AB and further requires explicit permission from both Starweb AB and the shop owner. If you are interested in using it, please contact us at starwebapi@starweb.se",
    "title": "Starweb Shop API v.2",
    "version": "2.0.0"
  },
  "host": "{shopId}.sws.local",
  "basePath": "/api/v2",
  "schemes": [
    "https"
  ],
  "paths": {
    "/currencies": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An collection of currencies",
            "schema": {
              "$ref": "#/definitions/CurrencyCollection"
            }
          }
        },
        "tags": [
          "Currency"
        ],
        "description": "Returns a list of currencies supported by the shop",
        "operationId": "getCurrencies",
        "summary": "List all currencies"
      },
      "summary": "Get Currencies"
    },
    "/currencies/{currencyCode}": {
      "parameters": [
        {
          "description": "The currency code",
          "example": "sek",
          "in": "path",
          "name": "currencyCode",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A currency",
            "schema": {
              "$ref": "#/definitions/CurrencyModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Currency"
        ],
        "description": "Retrieves the details of a currency",
        "operationId": "getCurrency",
        "summary": "Retrieve a currency"
      },
      "summary": "Get a currency"
    },
    "/customer-tags": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An collection of customer tags",
            "schema": {
              "$ref": "#/definitions/CustomerTagModelCollection"
            }
          }
        },
        "tags": [
          "Tags"
        ],
        "description": "Returns a list of tags",
        "operationId": "getCustomersTags",
        "summary": "List all tags"
      },
      "summary": "Get customer tags"
    },
    "/customer-tags/{tagId}": {
      "parameters": [
        {
          "description": "The tag id",
          "in": "path",
          "name": "tagId",
          "required": true,
          "schema": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A customer tag",
            "schema": {
              "$ref": "#/definitions/CustomerTagModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Tags"
        ],
        "description": "Retrieves a `Tag` object",
        "operationId": "getCustomersTag",
        "summary": "Retrieve a tag"
      },
      "summary": "Get a customer tag"
    },
    "/customers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The page of customers to return",
            "format": "int32",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "type": "integer"
          },
          {
            "description": "Sort the result using a specified field. customerId is default. Valid options are: customerId",
            "enum": [
              "customerId"
            ],
            "in": "query",
            "name": "sortBy",
            "type": "string",
            "x-example": "customerId"
          },
          {
            "description": "ASC for an ascending sort order; or DESC for a descending sort order. DESC is default",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortOrder",
            "type": "string",
            "x-example": "DESC"
          },
          {
            "description": "Use this to only fetch customers that has been created since a certain time. The time should be formatted using ISO-8601 (url encoded)",
            "in": "query",
            "name": "createdSince",
            "type": "string",
            "x-example": "2018-08-29T11:42:23+02:00"
          },
          {
            "description": "Use this to only fetch customers that has been modified since a certain time. The time should be formatted using ISO-8601 (url encoded)",
            "in": "query",
            "name": "updatedSince",
            "type": "string",
            "x-example": "2018-08-29T11:42:23+02:00"
          },
          {
            "description": "Use this to also include customers without an account",
            "in": "query",
            "name": "includeWithoutAccount",
            "type": "boolean",
            "x-example": true
          },
          {
            "description": "If you want to include child data in the result. Example: ?include=tags (to include customer tags); ?include=tags,addresses (to include both customer tags and addresses). Available includes: tags, externalServices, addresses",
            "examples": {
              "includeAddresses": {
                "summary": "include addresses",
                "value": "addresses"
              },
              "includeExternalServices": {
                "summary": "include external services",
                "value": "externalServices"
              },
              "includeTags": {
                "summary": "include tags",
                "value": "tags"
              },
              "includeTagsAndExternalServices": {
                "summary": "include tags and external services",
                "value": "tags,externalServices"
              }
            },
            "explode": false,
            "in": "query",
            "name": "include",
            "style": "form",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of customers",
            "schema": {
              "$ref": "#/definitions/CustomerModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Customers"
        ],
        "description": "Returns a list of customers",
        "operationId": "listCustomers",
        "summary": "List all customers"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Customer data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerUpdateModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created customer is returned",
            "schema": {
              "$ref": "#/definitions/CustomerModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Customers"
        ],
        "description": "Creates a `Customer` object",
        "operationId": "createCustomer",
        "summary": "Create a customer"
      },
      "summary": "Get shop orders or create a new one"
    },
    "/customers/{customerId}": {
      "parameters": [
        {
          "description": "The customers id",
          "in": "path",
          "name": "customerId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Customers"
        ],
        "description": "Delete a customer permanently!",
        "operationId": "deleteCustomer",
        "summary": "Delete a customer"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "If you want to include child data in the result. Example: ?include=tags (to include customer tags); ?include=tags,addresses (to include both customer tags and addresses). Available includes: tags, externalServices, addresses",
            "examples": {
              "includeAddresses": {
                "summary": "include addresses",
                "value": "addresses"
              },
              "includeExternalServices": {
                "summary": "include external services",
                "value": "externalServices"
              },
              "includeTags": {
                "summary": "include tags",
                "value": "tags"
              },
              "includeTagsAndExternalServices": {
                "summary": "include tags and external services",
                "value": "tags,externalServices"
              }
            },
            "explode": false,
            "in": "query",
            "name": "include",
            "style": "form",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A customer is returned",
            "schema": {
              "$ref": "#/definitions/CustomerModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Customers"
        ],
        "description": "Retrieves a `Customer` object",
        "operationId": "getCustomer",
        "summary": "Retrieve a customer"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Customer data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerUpdateModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated customer is returned",
            "schema": {
              "$ref": "#/definitions/CustomerModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Customers"
        ],
        "description": "Updates a customer. Retrieves the updated `Customer` object",
        "operationId": "patchCustomer",
        "summary": "Update a customer"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Customer data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerUpdateModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated customer is returned",
            "schema": {
              "$ref": "#/definitions/CustomerModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Customers"
        ],
        "description": "Updates a customer. Retrieves the updated `Customer` object",
        "operationId": "putCustomer",
        "summary": "Update a customer"
      },
      "summary": "Get or manipulate a certain customer"
    },
    "/customers/{customerId}/addresses": {
      "parameters": [
        {
          "description": "The customers id",
          "in": "path",
          "name": "customerId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An object of customer addresses",
            "schema": {
              "$ref": "#/definitions/CustomerAddressesModelCollection"
            }
          }
        },
        "tags": [
          "Customer Addresses"
        ],
        "description": "Returns a list of addresses for a customer",
        "operationId": "getCustomerGroups",
        "summary": "List all addresses"
      },
      "summary": "Get customer addresses"
    },
    "/customers/{customerId}/addresses/{addressType}": {
      "parameters": [
        {
          "description": "The customers id",
          "in": "path",
          "name": "customerId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The customer address type",
          "in": "path",
          "name": "addressType",
          "required": true,
          "schema": {
            "enum": [
              "delivery",
              "invoice"
            ],
            "example": "invoice",
            "type": "string"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Customer Addresses"
        ],
        "description": "Delete a customer address permanently.",
        "operationId": "removeAddressFromCustomer",
        "summary": "Delete a customer address"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An customer address is returned",
            "schema": {
              "$ref": "#/definitions/CustomerAddressesModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Customer Addresses"
        ],
        "description": "Retrieves a `CustomerAddress` object",
        "operationId": "getCustomerAddress",
        "summary": "Rerieve a customer address"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Address data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated customer address is returned",
            "schema": {
              "$ref": "#/definitions/CustomerAddressesModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Customer Addresses"
        ],
        "description": "Updates a customer address. Retrieves the updated `CustomerAddress` object",
        "operationId": "patchCustomerAddress",
        "summary": "Update a customer address"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Address data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated customer address is returned",
            "schema": {
              "$ref": "#/definitions/CustomerAddressesModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Customer Addresses"
        ],
        "description": "Updates a customer address. Retrieves the updated `CustomerAddress` object",
        "operationId": "putCustomerAddress",
        "summary": "Update a customer address"
      },
      "summary": "Get, delete or update a customers address"
    },
    "/customers/{customerId}/external-services": {
      "parameters": [
        {
          "description": "The customers id",
          "in": "path",
          "name": "customerId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of external services",
            "schema": {
              "$ref": "#/definitions/CustomerExternalServicesModelCollection"
            }
          }
        },
        "tags": [
          "Customer External Services"
        ],
        "description": "Returns a list of external services for a customer",
        "operationId": "getCustomerExternalServices",
        "summary": "List all customer external services‚"
      },
      "summary": "Get customer external services. At this time you cannot create or update a customer external service."
    },
    "/customers/{customerId}/external-services/{serviceName}": {
      "parameters": [
        {
          "description": "The customers id",
          "in": "path",
          "name": "customerId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The service name",
          "in": "path",
          "name": "serviceName",
          "required": true,
          "schema": {
            "example": "Fortnox",
            "type": "string"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An external service is returned",
            "schema": {
              "$ref": "#/definitions/CustomerExternalServicesModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Customer External Services"
        ],
        "description": "Retrieves a `CustomerExternalService` object",
        "operationId": "getCustomerExternalService",
        "summary": "Retrieve a customer external service"
      },
      "summary": "Get a certain customer external service"
    },
    "/customers/{customerId}/tags": {
      "parameters": [
        {
          "description": "The customers id",
          "in": "path",
          "name": "customerId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of customer tags",
            "schema": {
              "$ref": "#/definitions/CustomerAddedTagModelCollection"
            }
          }
        },
        "tags": [
          "Customer Tags"
        ],
        "description": "Returns a list of customer tags",
        "operationId": "getCustomerTags",
        "summary": "List all tags for a customer"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Customer tag data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAddedTagModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created customer tag is returned",
            "schema": {
              "$ref": "#/definitions/CustomerAddedTagModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Customer Tags"
        ],
        "description": "Add a tag to a customer. Retrieves the created `CustomerTag` object",
        "operationId": "addTagToCustomer",
        "summary": "Add a customer tag"
      },
      "summary": "Get customer tags or add an existing tag to a customer"
    },
    "/customers/{customerId}/tags/{tagId}": {
      "parameters": [
        {
          "description": "The customers id",
          "in": "path",
          "name": "customerId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The customer tag id",
          "in": "path",
          "name": "tagId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Customer Tags"
        ],
        "description": "Deletes a customer tag permanently.",
        "operationId": "removeTagFromCustomer",
        "summary": "Delete a customer tag‚"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An customer tag is returned",
            "schema": {
              "$ref": "#/definitions/CustomerAddedTagModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Customer Tags"
        ],
        "description": "Retrieves a `CustomerTag` object",
        "operationId": "getCustomerTag",
        "summary": "Retrieve a customer tag‚"
      },
      "summary": "Get or replace a customers tag"
    },
    "/media-files": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The page of media files to return",
            "format": "int32",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Collection of media files",
            "schema": {
              "$ref": "#/definitions/MediaFileModelCollection"
            }
          }
        },
        "tags": [
          "Media Files"
        ],
        "description": "Returns a list of media file‚",
        "operationId": "getMediaFiles",
        "summary": "List all media files"
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The media file to upload",
            "in": "formData",
            "name": "body",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "201": {
            "description": "The created media file is returned",
            "schema": {
              "$ref": "#/definitions/MediaFileModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Media Files"
        ],
        "description": "Creates a new `Media File` object",
        "operationId": "createMediaFile",
        "summary": "Create a media file"
      },
      "summary": "Create and fetch media files"
    },
    "/media-files/{mediaFileId}": {
      "parameters": [
        {
          "description": "The media files id",
          "in": "path",
          "name": "mediaFileId",
          "required": true,
          "schema": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Media Files"
        ],
        "description": "Delete a media file permanently.",
        "operationId": "deleteMediaFile",
        "summary": "Delete a media file"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A media file is returned",
            "schema": {
              "$ref": "#/definitions/MediaFileModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Media Files"
        ],
        "description": "Retrieve a `MediaFile` object",
        "operationId": "getMediaFile",
        "summary": "Retrieve a media file"
      },
      "patch": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The media file to upload",
            "in": "formData",
            "name": "body",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated media file is returned",
            "schema": {
              "$ref": "#/definitions/MediaFileModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Media Files"
        ],
        "description": "Updates a media file. Retrieves the updated `MediaFile` object",
        "operationId": "patchMediaFile",
        "summary": "Update a media file"
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The media file to upload",
            "in": "formData",
            "name": "body",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated media file is returned",
            "schema": {
              "$ref": "#/definitions/MediaFileModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Media Files"
        ],
        "description": "Updates a media file. Retrieves the updated `MediaFile` object",
        "operationId": "putMediaFile",
        "summary": "Update a media file"
      },
      "summary": "Get or manipulate a certain media file"
    },
    "/order-statuses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of order statuses",
            "schema": {
              "$ref": "#/definitions/OrderStatusModelCollection"
            }
          }
        },
        "tags": [
          "Order Statuses"
        ],
        "description": "Returns a list of order statuses",
        "operationId": "getOrderStatuses",
        "summary": "List all order statuses"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Order status data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderStatusModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created order status is returned",
            "schema": {
              "$ref": "#/definitions/OrderStatusModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order Statuses"
        ],
        "description": "Create an order status. Retrieves the created `OrderStatus` object",
        "operationId": "createOrderStatus",
        "summary": "Create an order status"
      },
      "summary": "Get or create order statuses"
    },
    "/order-statuses/{orderStatusId}": {
      "parameters": [
        {
          "description": "The order status id",
          "in": "path",
          "name": "orderStatusId",
          "required": true,
          "schema": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "403": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order Statuses"
        ],
        "description": "Deletes an oder status. Retrieves the updated `OrderItem` object. \n                    NB! You are not allowed to delete order statuses that is in use by an order, or standard order statuses (all statuses with an idCode set)",
        "operationId": "deleteOrderStatus",
        "summary": "Delete an oder status"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An order status is returned",
            "schema": {
              "$ref": "#/definitions/OrderStatusModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order Statuses"
        ],
        "description": "Retrieves the `OrderStatus` object",
        "operationId": "getOrderStatus",
        "summary": "Retrieve an order status"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Order status data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderStatusModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated order status is returned",
            "schema": {
              "$ref": "#/definitions/OrderStatusModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "403": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order Statuses"
        ],
        "description": "Updates an oder status. Retrieves the updated `Orderstatus` object. \n                    NB! You are not allowed to update standard order statuses (all statuses with an idCode set)",
        "operationId": "patchOrderStatus",
        "summary": "Update an oder status"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Order status data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderStatusModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated order status is returned",
            "schema": {
              "$ref": "#/definitions/OrderStatusModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "403": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order Statuses"
        ],
        "description": "Updates an oder status. Retrieves the updated `Orderstatus` object. \n                NB! You are not allowed to update standard order statuses (all statuses with an idCode set)",
        "operationId": "putOrderStatus",
        "summary": "Update an oder status"
      },
      "summary": "Get or manipulate a certain order status."
    },
    "/orders": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The page of orders to return",
            "format": "int32",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "type": "integer"
          },
          {
            "description": "Set to true if you want to fetch orders that has not been completed yet. An order is ”completed” when the payment step has been completed successfully.",
            "in": "query",
            "name": "includeNonCompletePayments",
            "type": "boolean"
          },
          {
            "description": "A filter query to filter the fetched orders by. Will search in fields such as: customer/company name, order items sku and description, etc",
            "in": "query",
            "name": "filterQuery",
            "type": "string"
          },
          {
            "description": "Only fetch orders with a certain payment method Id",
            "in": "query",
            "name": "filterPaymentMethodId",
            "type": "integer"
          },
          {
            "description": "Only fetch orders with a certain shipping method Id",
            "in": "query",
            "name": "filterShippingMethodId",
            "type": "integer"
          },
          {
            "description": "Only fetch orders created after this timestamp (The time should be formatted using ISO-8601 and url encoded)",
            "in": "query",
            "name": "ordersCreatedAfter",
            "type": "string"
          },
          {
            "description": "Only fetch orders created before this timestamp (The time should be formatted using ISO-8601 and url encoded)",
            "in": "query",
            "name": "ordersCreatedBefore",
            "type": "string"
          },
          {
            "description": "Only fetch orders with the specifiec order status. Use order status ID",
            "in": "query",
            "minimum": 1,
            "name": "statusFilter",
            "type": "integer"
          },
          {
            "description": "Sort the result using a specified field. orderId is default",
            "enum": [
              "orderId",
              "createdAt",
              "modifiedAt",
              "customer",
              "paymentMethodName",
              "shippingMethodName",
              "totalAmount",
              "status",
              "read"
            ],
            "in": "query",
            "name": "sortBy",
            "type": "string",
            "x-example": "orderId"
          },
          {
            "description": "ASC for an ascending sort order; or DESC for a descending sort order. DESC is default",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortOrder",
            "type": "string",
            "x-example": "DESC"
          },
          {
            "description": "If you want to include child data in the result. Example: ?include=items (to include order items) or ?include=items,externalServices (to include order items as well as external ids). Available includes: items, externalServices, status, customer, addresses",
            "examples": {
              "items": {
                "summary": "include items",
                "value": "items"
              },
              "itemsAndExternalServices": {
                "summary": "include items and external services",
                "value": "items,externalServices"
              }
            },
            "explode": false,
            "in": "query",
            "name": "include",
            "style": "form",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of orders",
            "schema": {
              "$ref": "#/definitions/OrderModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "description": "Returns a list of orders.",
        "operationId": "listOrders",
        "summary": "List all orders"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Order data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderUpdateModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created order is returned",
            "schema": {
              "$ref": "#/definitions/OrderModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "description": "Create an order. Retrieves the create `Order` object",
        "operationId": "createOrder",
        "summary": "Create an order"
      },
      "summary": "Get shop orders or create a new one"
    },
    "/orders/{orderId}": {
      "parameters": [
        {
          "description": "The orders id",
          "in": "path",
          "name": "orderId",
          "required": true,
          "schema": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "description": "Delete an order permanently",
        "operationId": "deleteOrder",
        "summary": "Delete an order"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "If you want to include child data in the result. Example: ?include=items (to include order items) or ?include=items,externalServices (to include order items as well as external ids). Available includes: items, externalServices, status, customer, addresses",
            "examples": {
              "items": {
                "summary": "include items",
                "value": "items"
              },
              "itemsAndExternalServices": {
                "summary": "include items and external services",
                "value": "items,externalServices"
              }
            },
            "explode": false,
            "in": "query",
            "name": "include",
            "style": "form",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An order is returned",
            "schema": {
              "$ref": "#/definitions/OrderModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "description": "Retrieve an `Order` object",
        "operationId": "getOrder",
        "summary": "Retrieve an order"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Order data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderUpdateModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated order is returned",
            "schema": {
              "$ref": "#/definitions/OrderModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "description": "Updates an oder. Retrieves the updated `Order` object",
        "operationId": "patchOrder",
        "summary": "Update an oder"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Order data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderUpdateModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated order is returned",
            "schema": {
              "$ref": "#/definitions/OrderModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "description": "Updates an oder. Retrieves the updated `Order` object",
        "operationId": "putOrder",
        "summary": "Update an oder"
      },
      "summary": "Get or manipulate a certain shop order"
    },
    "/orders/{orderId}/addresses": {
      "parameters": [
        {
          "description": "The orders id",
          "in": "path",
          "name": "orderId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of order addresses",
            "schema": {
              "$ref": "#/definitions/OrderAddressCollection"
            }
          }
        },
        "tags": [
          "Order Addresses"
        ],
        "description": "Returns a list o order addresses",
        "operationId": "listOrderAddresses",
        "summary": "List all order addresses"
      },
      "summary": "Get an orders addresses"
    },
    "/orders/{orderId}/addresses/{addressType}": {
      "parameters": [
        {
          "description": "The orders id",
          "in": "path",
          "name": "orderId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The order address type",
          "in": "path",
          "name": "addressType",
          "required": true,
          "schema": {
            "enum": [
              "paymentMethodDelivery",
              "paymentMethodInvoice",
              "originalDelivery",
              "originalInvoice",
              "customerDelivery",
              "customerInvoice"
            ],
            "example": "originalInvoice",
            "type": "string"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order Addresses"
        ],
        "description": "Delete an oder address permanently.",
        "operationId": "deleteOrderAddress",
        "summary": "Delete an oder address"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An address is returned",
            "schema": {
              "$ref": "#/definitions/AddressModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order Addresses"
        ],
        "description": "Retrieves the `OrderAddress` object",
        "operationId": "getOrderAddress",
        "summary": "Retrieve an oder address"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Address data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated address is returned",
            "schema": {
              "$ref": "#/definitions/AddressModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order Addresses"
        ],
        "description": "Updates an oder adress. Retrieves the updated `OrderAddress` object",
        "operationId": "patchOrderAddress",
        "summary": "Update an oder"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Address data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated address is returned",
            "schema": {
              "$ref": "#/definitions/AddressModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order Addresses"
        ],
        "description": "Updates an oder adress. Retrieves the updated `OrderAddress` object",
        "operationId": "putOrderAddress",
        "summary": "Update an oder"
      },
      "summary": "Get or manipulate a certain order address"
    },
    "/orders/{orderId}/comments": {
      "parameters": [
        {
          "description": "The orders id",
          "in": "path",
          "name": "orderId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A collection of order comments",
            "schema": {
              "$ref": "#/definitions/OrderCommentModelCollection"
            }
          }
        },
        "tags": [
          "Order Comments"
        ],
        "description": "Returns a list of order comments.",
        "operationId": "getOrderComments",
        "summary": "List all order comments"
      },
      "summary": "Get order comments"
    },
    "/orders/{orderId}/comments/{commentId}": {
      "parameters": [
        {
          "description": "The orders id",
          "in": "path",
          "name": "orderId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The order comments id",
          "in": "path",
          "name": "commentId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An order comment is returned",
            "schema": {
              "$ref": "#/definitions/OrderCommentModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order Comments"
        ],
        "description": "Retrieves the `OrderComment` object",
        "operationId": "getOrderComment",
        "summary": "Retrieve an order comment"
      },
      "summary": "Get a certain order comment"
    },
    "/orders/{orderId}/external-services": {
      "parameters": [
        {
          "description": "The orders id",
          "in": "path",
          "name": "orderId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of external services",
            "schema": {
              "$ref": "#/definitions/OrderExternalServiceModelCollection"
            }
          }
        },
        "tags": [
          "Order External Services"
        ],
        "description": "Returns a list of order external services.",
        "operationId": "getOrderExternalServices",
        "summary": "List all order external services"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Order external service data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderExternalServiceModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created external service is returned",
            "schema": {
              "$ref": "#/definitions/OrderExternalServicesModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order External Services"
        ],
        "description": "Create an order external servicea. Retrieves the created `OrderExternalService`\n                                    object",
        "operationId": "createOrderExternalService",
        "summary": "Creates an order external service"
      },
      "summary": "Get or create order external services"
    },
    "/orders/{orderId}/external-services/{serviceName}": {
      "parameters": [
        {
          "description": "The orders id",
          "in": "path",
          "name": "orderId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The service name",
          "in": "path",
          "name": "serviceName",
          "required": true,
          "schema": {
            "example": "Fortnox",
            "type": "string"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order External Services"
        ],
        "description": "Deletes an order external service permanently",
        "operationId": "deleteOrderExternalService",
        "summary": "Delete an order external service"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An external service is returned",
            "schema": {
              "$ref": "#/definitions/OrderExternalServicesModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order External Services"
        ],
        "description": "Retrieves the `OrderExternalService` object",
        "operationId": "getOrderExternalService",
        "summary": "Retrieve an oder external service"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Order external service data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderExternalServiceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated external service is returned",
            "schema": {
              "$ref": "#/definitions/OrderExternalServicesModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order External Services"
        ],
        "description": "Updates an oder external service. \n                    Retrieves the updated `OrderExternalService` object",
        "operationId": "patchOrderExternalService",
        "summary": "Update an oder external service"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Order external service data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderExternalServiceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated external service is returned",
            "schema": {
              "$ref": "#/definitions/OrderExternalServicesModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order External Services"
        ],
        "description": "Updates an oder external service. \n                    Retrieves the updated `OrderExternalService` object",
        "operationId": "putOrderExternalService",
        "summary": "Update an oder external service"
      },
      "summary": "Get or manipulate a certain order external service"
    },
    "/orders/{orderId}/items": {
      "parameters": [
        {
          "description": "The orders id",
          "in": "path",
          "name": "orderId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of order items",
            "schema": {
              "$ref": "#/definitions/OrderItemModelCollection"
            }
          }
        },
        "tags": [
          "Order Items"
        ],
        "description": "Returns a list of order items",
        "operationId": "getOrderItems",
        "summary": "List all order items"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Order item data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderItemModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created order item is returned",
            "schema": {
              "$ref": "#/definitions/OrderItemModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order Items"
        ],
        "description": "Create an order item. Retrieves the create `OrderItem` object",
        "operationId": "createOrderItem",
        "summary": "Create an order item"
      },
      "summary": "Get or create order items"
    },
    "/orders/{orderId}/items/{orderItemId}": {
      "parameters": [
        {
          "description": "The orders id",
          "in": "path",
          "name": "orderId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The order item id",
          "in": "path",
          "name": "orderItemId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order Items"
        ],
        "description": "Delete the order item permanently.",
        "operationId": "deleteOrderItem",
        "summary": "Delete an order item"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An order item is returned",
            "schema": {
              "$ref": "#/definitions/OrderItemModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order Items"
        ],
        "description": "Retrieves the `OrderItem` object",
        "operationId": "getOrderItem",
        "summary": "Retrieve an order item"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Order item data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderItemModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated order item is returned",
            "schema": {
              "$ref": "#/definitions/OrderItemModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order Items"
        ],
        "description": "Updates an oder item. Retrieves the updated `OrderItem` object",
        "operationId": "patchOrderItem",
        "summary": "Update an oder item"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Order item data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderItemModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated order item is returned",
            "schema": {
              "$ref": "#/definitions/OrderItemModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Order Items"
        ],
        "description": "Updates an oder item. Retrieves the updated `OrderItem` object",
        "operationId": "putOrderItem",
        "summary": "Update an oder item"
      },
      "summary": "Get or manipulate a certain order item"
    },
    "/payment-methods": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An collection of payment methods",
            "schema": {
              "$ref": "#/definitions/PaymentMethodModelCollection"
            }
          }
        },
        "tags": [
          "Payment Methods"
        ],
        "description": "Returns a list of payment methods",
        "operationId": "getPaymentMethods",
        "summary": "List payment methods"
      },
      "summary": "Get payment methods"
    },
    "/payment-methods/{paymentMethodId}": {
      "parameters": [
        {
          "description": "The payment method id",
          "in": "path",
          "name": "paymentMethodId",
          "required": true,
          "schema": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A payment method",
            "schema": {
              "$ref": "#/definitions/PaymentMethodModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Payment Methods"
        ],
        "description": "Retrieves a `PaymentMethod` object",
        "operationId": "getPaymentMethod",
        "summary": "Retrieve a payment method"
      },
      "summary": "Get a payment method"
    },
    "/pricelists": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An collection of pricelists",
            "schema": {
              "$ref": "#/definitions/PricelistModelCollection"
            }
          }
        },
        "tags": [
          "Pricelists"
        ],
        "description": "Returns a list of pricelists",
        "operationId": "getPricelists",
        "summary": "List all pricelists"
      },
      "summary": "Get pricelists collection"
    },
    "/pricelists/{pricelistId}": {
      "parameters": [
        {
          "description": "The pricelist id",
          "in": "path",
          "name": "pricelistId",
          "required": true,
          "schema": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A pricelist",
            "schema": {
              "$ref": "#/definitions/PricelistModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Pricelists"
        ],
        "description": "Retrieves a `Pricelist` object",
        "operationId": "getPricelist",
        "summary": "Retrieve a pricelist"
      },
      "summary": "Get a pricelist"
    },
    "/product-attributes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of attribute",
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Attributes"
        ],
        "description": "Returns a list of product variant attributes",
        "operationId": "listProductsVariantsAttributes",
        "summary": "List all product variant attributes"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Attribute data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeModelUpdatable"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created attribute is returned",
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Attributes"
        ],
        "description": "Creates a product variant attribute. \n                    Retrieves the created `ProductVariantAttribute` object.",
        "operationId": "createAttribute",
        "summary": "Create a product variant attribute"
      },
      "summary": "Get a collection of a variants attributes"
    },
    "/product-attributes/{attributeId}": {
      "parameters": [
        {
          "description": "The attribute value id",
          "in": "path",
          "name": "attributeId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Attributes"
        ],
        "description": "Deletes the product variant attribute permanently.",
        "operationId": "deleteAttribute",
        "summary": "Delete a product variant attribute"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An attribute value is returned",
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Attributes"
        ],
        "description": "Retrieves the `ProductVariantAttribute` object.",
        "operationId": "getProductsVariantsAttribute",
        "summary": "Retrieve a product variant attribute"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Attribute data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeModelUpdatable"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The updated attribute is returned",
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Attributes"
        ],
        "description": "Updates a product variant attribute.\n                    Retrieves the updated `ProductVariantAttribute` object.",
        "operationId": "patchAttribute",
        "summary": "Update a product variant attribute"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Attribute data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeModelUpdatable"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The updated attribute is returned",
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Attributes"
        ],
        "description": "Updates a product variant attribute.\n                    Retrieves the updated `ProductVariantAttribute` object.",
        "operationId": "putAttribute",
        "summary": "Update a product variant attribute"
      },
      "summary": "Get a certain attribute"
    },
    "/product-attributes/{attributeId}/values": {
      "parameters": [
        {
          "description": "The attribute id",
          "in": "path",
          "name": "attributeId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "If you want to include child data in the result. Example: ?include=attribute (to include the attribute the values belongs to). Available includes: attribute",
            "explode": false,
            "in": "query",
            "name": "include",
            "style": "form",
            "type": "string",
            "x-example": "attribute"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of attribute values",
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeValueModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Attribute Values"
        ],
        "description": "Returns a list of product variant attribute values.",
        "operationId": "listProductsVariantsAttributeValues",
        "summary": "List all product variant attribute values"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Attribute value data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeValueModelUpdatable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The created attribute value",
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeValueModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Attribute Values"
        ],
        "description": "Creates a product variant attribute value.\n                    Retrieves the created `ProductVariantAttributeValue` object.",
        "operationId": "createProductsVariantsAttributeValues",
        "summary": "Create a product variant attribute value"
      },
      "summary": "Get a collection of a variants attribute values"
    },
    "/product-attributes/{attributeId}/values/{attributeValueId}": {
      "parameters": [
        {
          "description": "The attribute id",
          "in": "path",
          "name": "attributeId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The attribe value id",
          "in": "path",
          "name": "attributeValueId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Attribute Values"
        ],
        "description": "Delete a product variant attribute value permanently.",
        "operationId": "deleteAttributeValue"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "If you want to include child data in the result. Example: ?include=attribute (to include the attribute the values belongs to). Available includes: attribute",
            "explode": false,
            "in": "query",
            "name": "include",
            "style": "form",
            "type": "string",
            "x-example": "attribute"
          }
        ],
        "responses": {
          "200": {
            "description": "An attribute value is returned",
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeValueModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Attribute Values"
        ],
        "description": "Retrieves the `ProductVariantAttributeValue` object.",
        "operationId": "getProductsVariantsAttributeValue",
        "summary": "Retrieve a product variant attribute value"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Attribute value data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeValueModelUpdatable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated attribute value",
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeValueModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Attribute Values"
        ],
        "description": "Updates a product variant attribute value.\n                    Retrieves the updated`ProductVariantAttributeValue` object.",
        "operationId": "patchProductsVariantsAttributeValues"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Attribute value data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeValueModelUpdatable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated attribute value",
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeValueModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Attribute Values"
        ],
        "description": "Updates a product variant attribute value.\n                    Retrieves the updated`ProductVariantAttributeValue` object.",
        "operationId": "putProductsVariantsAttributeValues",
        "summary": "Update a product variant attribute value"
      },
      "summary": "Get a certain attribute value"
    },
    "/product-categories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The page of categories to return",
            "format": "int32",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "type": "integer"
          },
          {
            "description": "Use to fetch categories with a specific external id",
            "in": "query",
            "name": "externalId",
            "type": "string"
          },
          {
            "description": "Use to fetch only categories with this parentId",
            "in": "query",
            "name": "parent",
            "type": "integer"
          },
          {
            "description": "Only fetch categories visible to visitors",
            "in": "query",
            "name": "filterVisible",
            "type": "boolean"
          },
          {
            "description": "If you want to include child data in the result. Example: ?include=languages (to include language based data such as category names, description, etc). Available includes: languages",
            "explode": false,
            "in": "query",
            "name": "include",
            "style": "form",
            "type": "string",
            "x-example": "languages"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of product categories",
            "schema": {
              "$ref": "#/definitions/ProductCategoryModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Categories"
        ],
        "description": "Returns a list of product categories",
        "operationId": "listProductCategories",
        "summary": "List all product categories"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product category data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCategoryModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created product category is returned",
            "schema": {
              "$ref": "#/definitions/ProductCategoryModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Categories"
        ],
        "description": "Create a product category. Retrieves the created `ProductCategory` object",
        "operationId": "createProductCategory",
        "summary": "Create a product category"
      },
      "summary": "Get product categories or create a new one"
    },
    "/product-categories/{categoryId}": {
      "parameters": [
        {
          "description": "The product category id",
          "in": "path",
          "name": "categoryId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Categories"
        ],
        "description": "Delete a product category permanently",
        "operationId": "deleteProductCategory",
        "summary": "Delete a product category"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "If you want to include child data in the result. Example: ?include=languages (to include language based data such as category names, description, etc). Available includes: languages",
            "explode": false,
            "in": "query",
            "name": "include",
            "style": "form",
            "type": "string",
            "x-example": "languages"
          }
        ],
        "responses": {
          "200": {
            "description": "A product category is returned",
            "schema": {
              "$ref": "#/definitions/ProductCategoryModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Categories"
        ],
        "description": "Retrieves a `ProductCategory` object",
        "operationId": "getProductCategory",
        "summary": "Retrieve a product category"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product category data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCategoryModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated product category is returned",
            "schema": {
              "$ref": "#/definitions/ProductCategoryModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Categories"
        ],
        "description": "Update a product category. Retrieves the updated `ProductCategory` object",
        "operationId": "patchProductCategory",
        "summary": "Update a product category"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product category data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCategoryModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated product category is returned",
            "schema": {
              "$ref": "#/definitions/ProductCategoryModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Categories"
        ],
        "description": "Update a product category. Retrieves the updated `ProductCategory` object",
        "operationId": "putProductCategory",
        "summary": "Update a product category"
      },
      "summary": "Get or manipulate a certain product category"
    },
    "/product-manufacturers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of product manufacturer",
            "schema": {
              "$ref": "#/definitions/ProductManufacturerModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Manufacturers"
        ],
        "description": "Returns a list of product manufacturers.",
        "operationId": "listProductManufacturers",
        "summary": "List all product manufacturers"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product manufacturer data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductManufacturerModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The created product manufacturer",
            "schema": {
              "$ref": "#/definitions/ProductManufacturerModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Manufacturers"
        ],
        "description": "Creates a product manufacturer.",
        "operationId": "createProductManufacturers",
        "summary": "Create a product manufacturer"
      },
      "summary": "List product manufacturers"
    },
    "/product-manufacturers/{manufacturerId}": {
      "parameters": [
        {
          "description": "The manufacturers id",
          "in": "path",
          "name": "manufacturerId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Manufacturers"
        ],
        "description": "Deletes the `ProductManufacturer` object.",
        "operationId": "deleteProductManufacturer",
        "summary": "Deletes a product manufacturer"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A product manufacturer is returned",
            "schema": {
              "$ref": "#/definitions/ProductManufacturerModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Manufacturers"
        ],
        "description": "Retrieves the `ProductManufacturer` object.",
        "operationId": "getProductManufacturer",
        "summary": "Retrieve a product manufacturer"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product manufacturer data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductManufacturerModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A product manufacturer is returned",
            "schema": {
              "$ref": "#/definitions/ProductManufacturerModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Manufacturers"
        ],
        "description": "Updates the `ProductManufacturer` object.",
        "operationId": "patchProductManufacturer",
        "summary": "Update a product manufacturer"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product manufacturer data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductManufacturerModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A product manufacturer is returned",
            "schema": {
              "$ref": "#/definitions/ProductManufacturerModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Manufacturers"
        ],
        "description": "Updates the `ProductManufacturer` object.",
        "operationId": "putProductManufacturer",
        "summary": "Update a product manufacturer"
      },
      "summary": "Get a certain product manufacturer"
    },
    "/product-meta-data-types": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of product meta data types",
            "schema": {
              "$ref": "#/definitions/ProductMetaDataTypeModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Meta Data Types"
        ],
        "description": "Returns a list of product meta data types",
        "operationId": "listProductMetaDataTypes",
        "summary": "List all product meta data types"
      },
      "summary": "Get a product meta data type"
    },
    "/product-meta-data-types/{metaDataTypeId}": {
      "parameters": [
        {
          "description": "The meta data types id",
          "in": "path",
          "name": "metaDataTypeId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A product meta data type is returned",
            "schema": {
              "$ref": "#/definitions/ProductMetaDataTypeModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Meta Data Types"
        ],
        "description": "Retrieves the `ProductMetaDataType` object.",
        "operationId": "getProductMetaDataType",
        "summary": "Retrieve a product meta data type"
      },
      "summary": "Get a certain product meta data type"
    },
    "/product-stock-statuses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of stock statuses",
            "schema": {
              "$ref": "#/definitions/ProductStockStatusModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Stock Statuses"
        ],
        "description": "Returns a list of product stock statuses.",
        "operationId": "listProductStockStatses",
        "summary": "List all product stock statuses"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product stock status data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductStockStatusModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created product stock status is returned",
            "schema": {
              "$ref": "#/definitions/ProductStockStatusModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Stock Statuses"
        ],
        "description": "Create a product stock status. Retrieves the created `ProductStockStatus` object.",
        "operationId": "createProductStockStatus",
        "summary": "Create a product stock status"
      },
      "summary": "Get product stock status or create a new one"
    },
    "/product-stock-statuses/{stockStatusId}": {
      "parameters": [
        {
          "description": "The stock status id",
          "in": "path",
          "name": "stockStatusId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Stock Statuses"
        ],
        "description": "Deletes a product stock status permanently.",
        "operationId": "deleteProductStockStatus",
        "summary": "Delete a product stock status"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A product stock status is returned",
            "schema": {
              "$ref": "#/definitions/ProductStockStatusModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Stock Statuses"
        ],
        "description": "Retrieves the `ProductStockStatus` object.",
        "operationId": "getProductStockStatus",
        "summary": "Retrieve a product stock status"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product stock status data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductStockStatusModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated product stock status is returned",
            "schema": {
              "$ref": "#/definitions/ProductStockStatusModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Stock Statuses"
        ],
        "description": "Updates a product stock status. Retrieves the update `ProductStockStatus` object.",
        "operationId": "patchProductStockStatus",
        "summary": "Update a product stock status"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product stock status data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductStockStatusModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated product stock status is returned",
            "schema": {
              "$ref": "#/definitions/ProductStockStatusModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Stock Statuses"
        ],
        "description": "Updates a product stock status. Retrieves the update `ProductStockStatus` object.",
        "operationId": "putProductStockStatus",
        "summary": "Update a product stock status"
      },
      "summary": "Get or manipulate a certain product stock status"
    },
    "/product-units": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of product units",
            "schema": {
              "$ref": "#/definitions/ProductUnitModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Units"
        ],
        "description": "Returns a list of product units.",
        "operationId": "listProductUnits",
        "summary": "List all product units"
      },
      "summary": "Get a product unit"
    },
    "/product-units/{unitId}": {
      "parameters": [
        {
          "description": "The units id",
          "in": "path",
          "name": "unitId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A product unit is returned",
            "schema": {
              "$ref": "#/definitions/ProductUnitModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Units"
        ],
        "description": "Retrieves the `ProductUnit` object.",
        "operationId": "getProductUnit",
        "summary": "Retrieve a product unit"
      },
      "summary": "Get a certain product unit"
    },
    "/products": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The page of products to return",
            "format": "int32",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "type": "integer"
          },
          {
            "description": "Use this to only fetch products that has been created since a certain time. The time should be formatted using ISO-8601 (url encoded)",
            "in": "query",
            "name": "createdSince",
            "type": "string",
            "x-example": "2018-08-29T11:42:23+02:00"
          },
          {
            "description": "Use this to only fetch products that has been modified since a certain time. The time should be formatted using ISO-8601 (url encoded)",
            "in": "query",
            "name": "updatedSince",
            "type": "string",
            "x-example": "2018-08-29T11:42:23+02:00"
          },
          {
            "description": "Only fetch products visible to visitors",
            "in": "query",
            "name": "filterVisible",
            "type": "boolean",
            "x-example": true
          },
          {
            "description": "If you want to include child data in the result. Example: ?include=primaryVariant (to include primary product variant);?include=primaryVariant,languages (to include both primary product variant and languages). Available includes: primaryVariant, primaryVariant.prices, primaryVariant.attributes, attributes, mediaFiles, languages, vatRates, categories, unit, metaData. NOTE! Only one variant is included in result for performance reason. To fetch all variants, instead use /products/x/variants(unnecessary if hasSeveralVariants is false)",
            "examples": {
              "attributes": {
                "summary": "include attributes",
                "value": "attributes"
              },
              "languages": {
                "summary": "include languages",
                "value": "languages"
              },
              "primaryVariant": {
                "summary": "include primary variant",
                "value": "primaryVariant"
              },
              "primaryVariantPrices": {
                "summary": "include primary variant prices",
                "value": "primaryVariant.prices"
              },
              "primaryVariantPricesAndMediaFiles": {
                "summary": "include primary variant prices and media files",
                "value": "primaryVariant.prices,mediaFiles"
              }
            },
            "explode": false,
            "in": "query",
            "name": "include",
            "style": "form",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of products",
            "schema": {
              "$ref": "#/definitions/ProductModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Products"
        ],
        "description": "Returns a list of products.",
        "operationId": "listProducts",
        "summary": "List all products"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductModelUpdatable"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created product is returned",
            "schema": {
              "$ref": "#/definitions/ProductModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Products"
        ],
        "description": "Creates a product. Retrieves the created `Product` object.",
        "operationId": "createProduct",
        "summary": "Create a product"
      },
      "summary": "Get products or create a new one"
    },
    "/products/{productId}": {
      "parameters": [
        {
          "description": "The product id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Products"
        ],
        "description": "Deletes a product permanently.",
        "operationId": "deleteProduct",
        "summary": "Delete a product"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "If you want to include child data in the result. Example: ?include=variants (to include product variants); ?include=variants,languages (to include both product variants and languages). Available includes: primaryVariant, primaryVariant.prices, mediaFiles, languages, vatRates, categories, unit, metaData. NOTE! Only one variant is included in result for performance reason. To fetch all variants, instead use /products/x/variants (unnecessary if hasSeveralVariants is false)",
            "explode": false,
            "in": "query",
            "name": "include",
            "style": "form",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A product is returned",
            "schema": {
              "$ref": "#/definitions/ProductModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Products"
        ],
        "description": "Retrieves the `Product` object.",
        "operationId": "getProduct",
        "summary": "Retrieve a product"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductModelUpdatable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated product is returned",
            "schema": {
              "$ref": "#/definitions/ProductModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Products"
        ],
        "description": "Updates a product. Retrieves the update `Product` object.",
        "operationId": "patchProduct",
        "summary": "Update a product"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductModelUpdatable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated product is returned",
            "schema": {
              "$ref": "#/definitions/ProductModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Products"
        ],
        "description": "Updates a product. Retrieves the update `Product` object.",
        "operationId": "putProduct",
        "summary": "Update a product"
      },
      "summary": "Get or manipulate a certain product"
    },
    "/products/{productId}/attributes": {
      "parameters": [
        {
          "description": "The products id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of the products attributes",
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeModelCollection"
            }
          },
          "404": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Attributes"
        ],
        "description": "Returns a list of product attributes.",
        "operationId": "listProductsAttributes",
        "summary": "List all product attributes"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Attribute id",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductsAttributesModelItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The added attribute",
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeModelItem"
            }
          },
          "404": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Attributes"
        ],
        "description": "Creates a product attribute. Retrieves the created `ProductAttribute` object.",
        "operationId": "addProductsAttributes",
        "summary": "Create a product attribute"
      },
      "summary": "Get a products attributes"
    },
    "/products/{productId}/attributes/{attributeId}": {
      "parameters": [
        {
          "description": "The product id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The attribute id you want to fetch.",
          "in": "path",
          "name": "attributeId",
          "required": true,
          "schema": {
            "example": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Attributes"
        ],
        "description": "Deletes a product attribute permanently.",
        "operationId": "deleteProductsAttribute",
        "summary": "Delete a product attribute"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A products attribute is returned",
            "schema": {
              "$ref": "#/definitions/ProductVariantAttributeModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Attributes"
        ],
        "description": "Retrieves the `ProductAttribute` object.",
        "operationId": "getProductsAttribute",
        "summary": "Retrieve a product attribute"
      },
      "summary": "Get a certain attribute from a product"
    },
    "/products/{productId}/categories": {
      "parameters": [
        {
          "description": "The products id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of product category links",
            "schema": {
              "$ref": "#/definitions/ProductCategoryLinkModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Category Links"
        ],
        "description": "Returns a list of product category links.",
        "operationId": "listProductsCategoryLinks",
        "summary": "Retrieve all product category links"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product category link data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCategoryLinkModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created products category link is returned",
            "schema": {
              "$ref": "#/definitions/ProductCategoryLinkModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Category Links"
        ],
        "description": "Retrieves the created `ProductCategoryLink` object",
        "operationId": "createProductsCategoryLink",
        "summary": "Create a product category link"
      },
      "summary": "Get a products category link or create a new link"
    },
    "/products/{productId}/categories/{categoryId}": {
      "parameters": [
        {
          "description": "The product id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The category id",
          "in": "path",
          "name": "categoryId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Category Links"
        ],
        "description": "Delete a product category link permanently.",
        "operationId": "deleteProductsCategoryLink",
        "summary": "Delete a product category link"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A products category link is returned",
            "schema": {
              "$ref": "#/definitions/ProductCategoryLinkModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Category Links"
        ],
        "description": "Retrieves the `ProductCategoryLink` object",
        "operationId": "getProductsCategoryLink",
        "summary": "Retrieve a product category link"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product category link data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCategoryLinkModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated products category link is returned",
            "schema": {
              "$ref": "#/definitions/ProductCategoryLinkModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Category Links"
        ],
        "description": "Update a product category link. Retrieves the update `ProductCategoryLink` object.",
        "operationId": "patchProductsCategoryLink",
        "summary": "Update a product category link"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product category link data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCategoryLinkModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated products category link is returned",
            "schema": {
              "$ref": "#/definitions/ProductCategoryLinkModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Category Links"
        ],
        "description": "Update a product category link. Retrieves the update `ProductCategoryLink` object.",
        "operationId": "putProductsCategoryLink",
        "summary": "Update a product category link"
      },
      "summary": "Get or manipulate a certain products category link"
    },
    "/products/{productId}/languages": {
      "parameters": [
        {
          "description": "The products id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of product languages",
            "schema": {
              "$ref": "#/definitions/ProductLanguageModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Languages"
        ],
        "description": "Returns a list of product languages.",
        "operationId": "listProductsLanguages",
        "summary": "List all product languages"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product language data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductLanguageModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created products language is returned",
            "schema": {
              "$ref": "#/definitions/ProductLanguageModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Languages"
        ],
        "description": "Create a product language. Retrieves the created `ProductLanguage` object.",
        "operationId": "createProductsLanguage",
        "summary": "Create a product language"
      },
      "summary": "Get a products languages or create a new language"
    },
    "/products/{productId}/languages/{langCode}": {
      "parameters": [
        {
          "description": "The product id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The language code you want to fetch/change. Supported language codes are: sv, en, no, da, fi, de, fr, es",
          "in": "path",
          "name": "langCode",
          "required": true,
          "schema": {
            "example": "sv",
            "type": "string"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Languages"
        ],
        "description": "Delete a product language permanently.",
        "operationId": "deleteProductsLanguage",
        "summary": "Delete a product language"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A products language is returned",
            "schema": {
              "$ref": "#/definitions/ProductLanguageModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Languages"
        ],
        "description": "Retrieves the `ProductLanguage` object.",
        "operationId": "getProductsLanguage",
        "summary": "Retrieve a product language"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product language data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductLanguageModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated products language is returned",
            "schema": {
              "$ref": "#/definitions/ProductLanguageModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Languages"
        ],
        "description": "Update a product language. Retrieves the update `ProductLanguage` object.",
        "operationId": "patchProductsLanguage",
        "summary": "Update a product language"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product language data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductLanguageModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated products language is returned",
            "schema": {
              "$ref": "#/definitions/ProductLanguageModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Languages"
        ],
        "description": "Update a product language. Retrieves the update `ProductLanguage` object.",
        "operationId": "putProductsLanguage",
        "summary": "Update a product language"
      },
      "summary": "Get or manipulate a certain products language"
    },
    "/products/{productId}/media-files": {
      "parameters": [
        {
          "description": "The products id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "description": "Updates a product vat rate. Retrieves the update `ProductVatRate` object.",
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of product media file links",
            "schema": {
              "$ref": "#/definitions/ProductMediaFileLinkModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Media File Links"
        ],
        "description": "Returns a list of product media file links.",
        "operationId": "listProductsMediaFileLinks",
        "summary": "List all product media file links"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product media file link data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductMediaFileLinkModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created products media file link is returned",
            "schema": {
              "$ref": "#/definitions/ProductMediaFileLinkModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Media File Links"
        ],
        "description": "Creates a product media file link. \n                    Retrieves the create `ProductMediaFileLink` object.",
        "operationId": "createProductsMediaFileLink",
        "summary": "Create a product media file link"
      },
      "summary": "Get a products media file links or create a new media file link"
    },
    "/products/{productId}/media-files/{mediaFileId}": {
      "parameters": [
        {
          "description": "The product id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The media file id of the link you want to fetch/change",
          "in": "path",
          "name": "mediaFileId",
          "required": true,
          "schema": {
            "example": 3,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Media File Links"
        ],
        "description": "Deletes the product media file link permanently.",
        "operationId": "deleteProductsMediaFileLink",
        "summary": "Delete a product media file link"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A products media file link is returned",
            "schema": {
              "$ref": "#/definitions/ProductMediaFileLinkModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Media File Links"
        ],
        "description": "Retrieves the `ProductMediaFileLink` object.",
        "operationId": "getProductsMediaFileLink",
        "summary": "Retrieve a product media file link"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product media file link data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductMediaFileLinkModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated products media file link is returned",
            "schema": {
              "$ref": "#/definitions/ProductMediaFileLinkModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Media File Links"
        ],
        "description": "Updates a product media file link. \n                    Retrieves the update `ProductMediaFileLink` object.",
        "operationId": "patchProductsMediaFileLink",
        "summary": "Update a product media file link"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product media file link data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductMediaFileLinkModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated products media file link is returned",
            "schema": {
              "$ref": "#/definitions/ProductMediaFileLinkModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Media File Links"
        ],
        "description": "Updates a product media file link. \n                    Retrieves the update `ProductMediaFileLink` object.",
        "operationId": "putProductsMediaFileLink",
        "summary": "Update a product media file link"
      },
      "summary": "Get or manipulate a certain products media file link"
    },
    "/products/{productId}/meta-data": {
      "parameters": [
        {
          "description": "The products id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of product meta data",
            "schema": {
              "$ref": "#/definitions/ProductMetaDataModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Meta Data"
        ],
        "description": "Returns a list of product meta data.",
        "operationId": "listProductsMetaData",
        "summary": "List all product meta data"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product meta data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductMetaDataModelUpdatable"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created products meta data is returned",
            "schema": {
              "$ref": "#/definitions/ProductMetaDataModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Meta Data"
        ],
        "description": "Creates a product meta data. Retrieves the created `ProductMetaData` object.",
        "operationId": "createProductsMetaData",
        "summary": "Create a product meta data"
      },
      "summary": "Get a products meta data or create a new one"
    },
    "/products/{productId}/meta-data/{metaDataTypeId}": {
      "parameters": [
        {
          "description": "The product id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The meta data type id",
          "in": "path",
          "name": "metaDataTypeId",
          "required": true,
          "schema": {
            "example": 9,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Meta Data"
        ],
        "description": "Deletes a product meta data permanently.",
        "operationId": "deleteProductsMetaData",
        "summary": "Delete a product meta data"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A products meta data is returned",
            "schema": {
              "$ref": "#/definitions/ProductMetaDataModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Meta Data"
        ],
        "description": "Retrieves the `ProductMetaData` object.",
        "operationId": "getProductsMetaData",
        "summary": "Retrieve a product meta data"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product meta data data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductMetaDataModelUpdatable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated products meta data is returned",
            "schema": {
              "$ref": "#/definitions/ProductMetaDataModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Meta Data"
        ],
        "description": "Updates a product meta data. Retrieves the update `ProductMetaData` object.",
        "operationId": "patchProductsMetaData",
        "summary": "Update a product meta data"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product meta data data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductMetaDataModelUpdatable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated products meta data is returned",
            "schema": {
              "$ref": "#/definitions/ProductMetaDataModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Meta Data"
        ],
        "description": "Updates a product meta data. Retrieves the update `ProductMetaData` object.",
        "operationId": "putProductsMetaData",
        "summary": "Update a product meta data"
      },
      "summary": "Get or manipulate a certain products meta data"
    },
    "/products/{productId}/variants": {
      "parameters": [
        {
          "description": "The products id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The page of customers to return",
            "format": "int32",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "type": "integer"
          },
          {
            "description": "If you want to include child data in the result. Example: ?include=prices (to include variants prices). Available includes: prices, attributes, attributes.attribute",
            "examples": {
              "attributeValues": {
                "summary": "include attribute values",
                "value": "attributeValues"
              },
              "attributeValues.attribute": {
                "summary": "include attribute values attribute",
                "value": "attributeValues.attribute"
              },
              "prices": {
                "summary": "include prices",
                "value": "prices"
              }
            },
            "explode": false,
            "in": "query",
            "name": "include",
            "style": "form",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of product variants",
            "schema": {
              "$ref": "#/definitions/ProductVariantModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variants"
        ],
        "description": "Return a list of product variants.",
        "operationId": "listProductsVariants",
        "summary": "List all product variants."
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product variant data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductVariantModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created products variant is returned",
            "schema": {
              "$ref": "#/definitions/ProductVariantModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variants"
        ],
        "description": "Creates a product variant. Retrieves the created `ProductVariant` object",
        "operationId": "createProductVariant",
        "summary": "Create a product variant."
      },
      "summary": "Get a products variants or create a new variant"
    },
    "/products/{productId}/variants/{variantId}": {
      "parameters": [
        {
          "description": "The product id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The products variants id",
          "in": "path",
          "name": "variantId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variants"
        ],
        "description": "Deletes a product variant permanently.",
        "operationId": "deleteProductsVariant",
        "summary": "Delete a product variant."
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "If you want to include child data in the result. Example: ?include=prices (to include variants prices). Available includes: prices,  attributes, attributes.attribute",
            "examples": {
              "attributeValues": {
                "summary": "include attribute values",
                "value": "attributeValues"
              },
              "attributeValues.attribute": {
                "summary": "include attribute values attribute",
                "value": "attributeValues.attribute"
              },
              "prices": {
                "summary": "include prices",
                "value": "prices"
              }
            },
            "explode": false,
            "in": "query",
            "name": "include",
            "style": "form",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A products variant is returned",
            "schema": {
              "$ref": "#/definitions/ProductVariantModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variants"
        ],
        "description": "Retrieves the `ProductVariant` object",
        "operationId": "getProductsVariant",
        "summary": "Retrieve a product variant."
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Products variant data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductVariantModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated products variant is returned",
            "schema": {
              "$ref": "#/definitions/ProductVariantModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variants"
        ],
        "description": "Updates a product variant. Retrieves the updated `ProductVariant` object",
        "operationId": "patchProductsVariant",
        "summary": "Update a product variant."
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Products variant data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductVariantModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated products variant is returned",
            "schema": {
              "$ref": "#/definitions/ProductVariantModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variants"
        ],
        "description": "Updates a product variant. Retrieves the updated `ProductVariant` object",
        "operationId": "putProductsVariant",
        "summary": "Update a product variant."
      },
      "summary": "Get or manipulate a certain product variant"
    },
    "/products/{productId}/variants/{variantId}/prices": {
      "parameters": [
        {
          "description": "The products id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The products variants id",
          "in": "path",
          "name": "variantId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of pricelist prices",
            "schema": {
              "$ref": "#/definitions/ProductVariantPriceModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Pricelist Prices"
        ],
        "description": "Returns a list of product variant pricelist prices",
        "operationId": "listProductsVariantsPricelistPrices",
        "summary": "List all product variant pricelist prices."
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Oricelist price data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductVariantPriceModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created pricelist price is returned",
            "schema": {
              "$ref": "#/definitions/ProductVariantPriceModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Pricelist Prices"
        ],
        "description": "Creates a product variant pricelist price. \n                    Retrieves the created `ProductVariantPricelistPrice` object",
        "operationId": "createProductVariantPricelistPrice",
        "summary": "Create a product variant pricelist prices."
      },
      "summary": "Get a pricelist price or create a new"
    },
    "/products/{productId}/variants/{variantId}/prices/{pricelistId}": {
      "parameters": [
        {
          "description": "The product id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The products variants id",
          "in": "path",
          "name": "variantId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The pricelist id",
          "in": "path",
          "name": "pricelistId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Pricelist Prices"
        ],
        "description": "Deletes a product variant pricelist price permanently.",
        "operationId": "deleteProductsVariantsPricelistPrice",
        "summary": "Delete a product variant pricelist prices."
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A pricelist price is returned",
            "schema": {
              "$ref": "#/definitions/ProductVariantPriceModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Pricelist Prices"
        ],
        "description": "Retrieves the `ProductVariantPricelistPrice` object",
        "operationId": "getProductsVariantsPricelistPrice",
        "summary": "Retrieves a product variant pricelist price."
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pricelist price data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductVariantPriceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated pricelist price is returned",
            "schema": {
              "$ref": "#/definitions/ProductVariantPriceModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Pricelist Prices"
        ],
        "description": "Updates a product variant pricelist price. \n                    Retrieves the updated `ProductVariantPricelistPrice` object",
        "operationId": "patchProductsVariantsPricelistPrice",
        "summary": "Update a product variant pricelist prices."
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pricelist price data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductVariantPriceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated pricelist price is returned",
            "schema": {
              "$ref": "#/definitions/ProductVariantPriceModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Variant Pricelist Prices"
        ],
        "description": "Updates a product variant pricelist price. \n                    Retrieves the updated `ProductVariantPricelistPrice` object",
        "operationId": "putProductsVariantsPricelistPrice",
        "summary": "Update a product variant pricelist prices."
      },
      "summary": "Get or manipulate a certain pricelist price"
    },
    "/products/{productId}/vat-rates": {
      "parameters": [
        {
          "description": "The products id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 101,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of product vat rates",
            "schema": {
              "$ref": "#/definitions/ProductVatRateModelCollection"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Vat Rates"
        ],
        "description": "Returns a list of product vat rates.",
        "operationId": "listProductsVatRates",
        "summary": "List all product vat rates"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product vat rate data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductVatRateModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created products vat rate is returned",
            "schema": {
              "$ref": "#/definitions/ProductVatRateModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Vat Rates"
        ],
        "description": "Creates a product vat rate. Retrieves the create `ProductVatRate` object.",
        "operationId": "createProductVatRate",
        "summary": "Create a product vat rate"
      },
      "summary": "Get a products country specific vat rates or create a new one"
    },
    "/products/{productId}/vat-rates/{countryCode}": {
      "parameters": [
        {
          "description": "The product id",
          "in": "path",
          "name": "productId",
          "required": true,
          "schema": {
            "example": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "The country code for the vat rate to fetch/manipulate",
          "in": "path",
          "name": "countryCode",
          "required": true,
          "schema": {
            "example": "se",
            "type": "string"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Vat Rates"
        ],
        "description": "Deletes the product vat rate permanently.",
        "operationId": "deleteProductsVatRate",
        "summary": "Delete a product vat rate"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A products vat rate is returned",
            "schema": {
              "$ref": "#/definitions/ProductVatRateModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Vat Rates"
        ],
        "description": "Retrieves the `ProductVatRate` object.",
        "operationId": "getProductsVatRate",
        "summary": "Retrieve a product vat rate"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Products vat rate data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductVatRateModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated products vat rate is returned",
            "schema": {
              "$ref": "#/definitions/ProductVatRateModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Vat Rates"
        ],
        "description": "Updates a product vat rate. Retrieves the update `ProductVatRate` object.",
        "operationId": "patchProductsVatRate",
        "summary": "Update a product vat rate"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Products vat rate data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductVatRateModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated products vat rate is returned",
            "schema": {
              "$ref": "#/definitions/ProductVatRateModelItem"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Product Vat Rates"
        ],
        "description": "Updates a product vat rate. Retrieves the update `ProductVatRate` object.",
        "operationId": "putProductsVatRate",
        "summary": "Update a product vat rate"
      },
      "summary": "Get or manipulate a certain country specific product vat rate"
    },
    "/shipping-methods": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An collection of shipping methods",
            "schema": {
              "$ref": "#/definitions/ShippingMethodModelCollection"
            }
          }
        },
        "tags": [
          "Shipping Methods"
        ],
        "description": "Returns a list of shipping methods.",
        "operationId": "getShippingMethods",
        "summary": "List all shipping methods"
      },
      "summary": "Get shipping methods collection"
    },
    "/shipping-methods/{shippingMethodId}": {
      "parameters": [
        {
          "description": "The shipping method id",
          "in": "path",
          "name": "shippingMethodId",
          "required": true,
          "schema": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A shipping method",
            "schema": {
              "$ref": "#/definitions/ShippingMethodModelItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Shipping Methods"
        ],
        "description": "Retrieves a `ShippingMethid` object",
        "operationId": "getShippingMethod",
        "summary": "Retrieve a shipping method"
      },
      "summary": "Get a shipping method"
    },
    "/shipping-tracking-types": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of shipping tracking types",
            "schema": {
              "$ref": "#/definitions/ShippingTrackingTypeModelCollection"
            }
          }
        },
        "tags": [
          "Shipping Tracking Types"
        ],
        "description": "Returns a list of shippoing tracking types.",
        "operationId": "getShippingTrackingTypes",
        "summary": "List all shipping tracking types"
      },
      "summary": "Get shipping tracking types"
    },
    "/shop": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A shop",
            "schema": {
              "$ref": "#/definitions/ShopItem"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Shop"
        ],
        "description": "Retrieves the `Shop` object.",
        "operationId": "getShop",
        "summary": "Retrieve the shop"
      },
      "summary": "Get shop details"
    },
    "/token": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The grant type to use for the request. At this time, only client_credentials is allowed",
            "in": "formData",
            "name": "grant_type",
            "type": "string",
            "x-example": "client_credentials"
          },
          {
            "description": "Your client id",
            "in": "formData",
            "name": "client_id",
            "type": "string",
            "x-example": "your-client-id"
          },
          {
            "description": "Your client secret",
            "in": "formData",
            "name": "client_secret",
            "type": "string",
            "x-example": "your-client-secret"
          }
        ],
        "responses": {
          "200": {
            "description": "Access Token and related details",
            "schema": {
              "$ref": "#/definitions/TokenModel"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "tags": [
          "Authentication"
        ],
        "description": "Create a token. Retrieves the create `Token` object.",
        "operationId": "generateFetchAccessToken",
        "summary": "Create a token"
      },
      "summary": "Generate and fetch new access token"
    }
  },
  "definitions": {
    "AddressModel": {
      "properties": {
        "address": {
          "description": "Address",
          "example": "Street 1",
          "maxLength": 50,
          "type": "string"
        },
        "attention": {
          "description": "Attention",
          "maxLength": 80,
          "type": "string"
        },
        "careOf": {
          "description": "Care Of",
          "maxLength": 80,
          "type": "string"
        },
        "city": {
          "description": "City",
          "example": "My Town",
          "maxLength": 30,
          "type": "string"
        },
        "companyName": {
          "description": "Company name",
          "example": "Example Ltd.",
          "maxLength": 80,
          "type": "string"
        },
        "countryCode": {
          "description": "Country code in ISO 3166-1 alpha-2 format",
          "example": "SE",
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "firstName": {
          "description": "First name",
          "example": "John",
          "maxLength": 35,
          "type": "string"
        },
        "lastName": {
          "description": "Last name",
          "example": "Doe",
          "maxLength": 35,
          "type": "string"
        },
        "mobilePhoneNo": {
          "description": "Mobile phone number in an international format",
          "example": "+46850910000",
          "maxLength": 30,
          "type": "string"
        },
        "phoneNo": {
          "description": "Phone number in an international format",
          "example": "+46406020900",
          "maxLength": 30,
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code",
          "example": "214 31",
          "maxLength": 12,
          "type": "string"
        },
        "reference": {
          "description": "Reference",
          "maxLength": 80,
          "type": "string"
        },
        "state": {
          "description": "State",
          "maxLength": 30,
          "type": "string"
        }
      },
      "type": "object"
    },
    "AddressModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/AddressModel"
        }
      }
    },
    "ClientCredentialModel": {
      "properties": {
        "client_id": {
          "description": "Your client id",
          "in": "formData",
          "name": "client_id",
          "type": "string",
          "x-example": "your-client-id"
        },
        "client_secret": {
          "description": "Your client secret",
          "in": "formData",
          "name": "client_secret",
          "type": "string",
          "x-example": "your-client-secret"
        },
        "grant_type": {
          "description": "The grant type to use for the request. At this time, only client_credentials is allowed",
          "in": "formData",
          "name": "grant_type",
          "type": "string",
          "x-example": "client_credentials"
        }
      },
      "type": "object"
    },
    "CurrencyCollection": {
      "properties": {
        "data": {
          "description": "A collection of currencies",
          "items": {
            "$ref": "#/definitions/CurrencyModel"
          },
          "type": "array"
        }
      }
    },
    "CurrencyModel": {
      "properties": {
        "code": {
          "description": "The currency code",
          "example": "SEK",
          "readOnly": true,
          "type": "string"
        },
        "exchangeRate": {
          "description": "The exchange rate against the shops default currency. Used in reports, etc. The default currency can be fetched from /shop",
          "example": "1.0",
          "type": "number"
        },
        "precision": {
          "description": "The number of decimals to show and use",
          "example": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CurrencyModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/CurrencyModel"
        }
      }
    },
    "CustomerAddedTagModel": {
      "properties": {
        "name": {
          "description": "The name of the tag",
          "example": "Exclusive customers",
          "readOnly": true,
          "type": "string"
        },
        "tagId": {
          "description": "The id of the tag",
          "example": 1,
          "minimum": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CustomerAddedTagModelCollection": {
      "properties": {
        "data": {
          "description": "A list of customer tags",
          "items": {
            "$ref": "#/definitions/CustomerAddedTagModel"
          },
          "type": "array"
        }
      }
    },
    "CustomerAddedTagModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/CustomerAddedTagModel"
        }
      }
    },
    "CustomerAddressesModelCollection": {
      "properties": {
        "data": {
          "properties": {
            "delivery": {
              "$ref": "#/definitions/AddressModel"
            },
            "invoice": {
              "$ref": "#/definitions/AddressModel"
            }
          },
          "type": "object"
        }
      }
    },
    "CustomerAddressesModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/AddressModel"
        }
      }
    },
    "CustomerExternalServicesModel": {
      "properties": {
        "externalIdValue": {
          "description": "The external service ID",
          "example": "ABC123",
          "maxLength": 40,
          "type": "string"
        },
        "serviceName": {
          "description": "The service name of the external service",
          "example": "Fortnox",
          "maxLength": 20,
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerExternalServicesModelCollection": {
      "properties": {
        "data": {
          "description": "A list of customer external services",
          "items": {
            "$ref": "#/definitions/CustomerExternalServicesModel"
          },
          "type": "array"
        }
      }
    },
    "CustomerExternalServicesModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/CustomerExternalServicesModel"
        }
      }
    },
    "CustomerModel": {
      "properties": {
        "tags": {
          "$ref": "#/definitions/CustomerTagModelCollection"
        },
        "addresses": {
          "$ref": "#/definitions/CustomerAddressesModelCollection"
        },
        "approved": {
          "description": "If the customer is approved or not. Can be null if the customer is neither approved nor disapproved yet",
          "nullable": true,
          "readOnly": true,
          "type": "boolean"
        },
        "approvedAt": {
          "description": "A timestamp of when the customer was was approved/disapproved. The time should be formatted using ISO-8601",
          "example": "2018-08-29T11:42:23+02:00",
          "readOnly": true,
          "type": "string"
        },
        "createdAt": {
          "description": "A timestamp of when the customer was created. The time should be formatted using ISO-8601",
          "example": "2018-08-29T11:42:23+02:00",
          "type": "string"
        },
        "customInfo1": {
          "description": "Custom info saved to a customer. Can be linked to text fields on the customer registration page for additional data collection",
          "maxLength": 255,
          "type": "string"
        },
        "customInfo2": {
          "description": "Custom info saved to a customer. Can be linked to text fields on the customer registration page for additional data collection",
          "maxLength": 255,
          "type": "string"
        },
        "customerId": {
          "description": "The customers ID",
          "example": 101,
          "readOnly": true,
          "type": "integer"
        },
        "email": {
          "description": "Email address of the customer",
          "format": "email",
          "maxLength": 255,
          "type": "string"
        },
        "externalServices": {
          "$ref": "#/definitions/CustomerExternalServicesModelCollection"
        },
        "modifiedAt": {
          "description": "A timestamp of when the customer was modified. The time should be formatted using ISO-8601",
          "example": "2018-08-29T11:42:23+02:00",
          "readOnly": true,
          "type": "string"
        },
        "nationalIdNo": {
          "description": "National id number of the customer",
          "maxLength": 20,
          "type": "string"
        },
        "pricelistId": {
          "description": "The id of the pricelist the customer is linked to (or null if the customer has no specific pricelist linked)",
          "nullable": true,
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of customer this is. Either: ”person” or ”company”",
          "example": "person",
          "type": "string"
        },
        "vatNo": {
          "description": "VAT number of the customer",
          "maxLength": 20,
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerModelCollection": {
      "properties": {
        "data": {
          "description": "A list of customers",
          "items": {
            "$ref": "#/definitions/CustomerModel"
          },
          "type": "array"
        },
        "meta": {
          "properties": {
            "pagination": {
              "$ref": "#/definitions/PaginationModel"
            }
          },
          "type": "object"
        }
      }
    },
    "CustomerModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/CustomerModel"
        }
      }
    },
    "CustomerTagModel": {
      "properties": {
        "name": {
          "description": "The tag name",
          "example": "Exclusive customers",
          "readOnly": true,
          "type": "string"
        },
        "tagId": {
          "description": "The tag Id",
          "example": 1,
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CustomerTagModelCollection": {
      "properties": {
        "data": {
          "description": "A list of customer tags",
          "items": {
            "$ref": "#/definitions/CustomerTagModel"
          },
          "type": "array"
        }
      }
    },
    "CustomerTagModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/CustomerTagModel"
        }
      }
    },
    "CustomerUpdateModel": {
      "properties": {
        "addresses": {
          "properties": {
            "delivery": {
              "$ref": "#/definitions/AddressModel"
            },
            "invoice": {
              "$ref": "#/definitions/AddressModel"
            }
          },
          "type": "object"
        },
        "createdAt": {
          "description": "A timestamp of when the customer was created. The time should be formatted using ISO-8601",
          "example": "2018-08-29T11:42:23+02:00",
          "type": "string"
        },
        "customInfo1": {
          "description": "Custom info saved to a customer. Can be linked to text fields on the customer registration page for additional data collection",
          "maxLength": 255,
          "type": "string"
        },
        "customInfo2": {
          "description": "Custom info saved to a customer. Can be linked to text fields on the customer registration page for additional data collection",
          "maxLength": 255,
          "type": "string"
        },
        "customerId": {
          "description": "The customers ID",
          "example": 101,
          "readOnly": true,
          "type": "integer"
        },
        "email": {
          "description": "Email address of the customer",
          "format": "email",
          "maxLength": 255,
          "type": "string"
        },
        "langCode": {
          "description": "Language code for the customer",
          "readOnly": true,
          "type": "string"
        },
        "nationalIdNo": {
          "description": "National id number of the customer",
          "maxLength": 20,
          "type": "string"
        },
        "pricelistId": {
          "description": "The id of the pricelist the customer is linked to (or null if the customer has no specific pricelist linked)",
          "nullable": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of customer this is. Either: ”person” or ”company”",
          "example": "person",
          "type": "string"
        },
        "vatNo": {
          "description": "VAT number of the customer",
          "maxLength": 20,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ErrorModel": {
      "properties": {
        "error": {
          "description": "An error code for this type of error",
          "example": "error_code",
          "readOnly": true,
          "type": "string"
        },
        "error_description": {
          "description": "A human readable description of the error",
          "example": "Something went wrong",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "MediaFileModel": {
      "properties": {
        "createdAt": {
          "description": "A timestamp of when the media file was created. The time should be formatted using ISO-8601",
          "example": "2018-08-29T11:42:23+02:00",
          "readOnly": true,
          "type": "string"
        },
        "height": {
          "description": "The media files height in pixels",
          "example": 2000,
          "readOnly": true,
          "type": "integer"
        },
        "mediaFileId": {
          "description": "The media file ID",
          "example": 101,
          "readOnly": true,
          "type": "integer"
        },
        "mime": {
          "description": "The media files mime type",
          "example": "image/jpeg",
          "readOnly": true,
          "type": "string"
        },
        "modifiedAt": {
          "description": "A timestamp of when the media file was modifies. The time should be formatted using ISO-8601",
          "example": "2018-08-29T11:42:23+02:00",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "The name of the media file",
          "example": "my-image.jpg",
          "readOnly": true,
          "type": "string"
        },
        "size": {
          "description": "The media files size in bytes",
          "example": 1157115,
          "readOnly": true,
          "type": "integer"
        },
        "url": {
          "description": "The media files URL",
          "example": "https://cdn.starwebserver.se/shops/leksaker/files/56220.jpg",
          "readOnly": true,
          "type": "string"
        },
        "width": {
          "description": "The media files width in pixels",
          "example": 2000,
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MediaFileModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of media files",
          "items": {
            "$ref": "#/definitions/MediaFileModel"
          },
          "type": "array"
        },
        "meta": {
          "properties": {
            "pagination": {
              "$ref": "#/definitions/PaginationModel"
            }
          },
          "type": "object"
        }
      }
    },
    "MediaFileModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/MediaFileModel"
        }
      }
    },
    "MediaFileUploadModel": {
      "properties": {
        "file": {
          "example": "[binary data]",
          "format": "binary",
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrderAddressCollection": {
      "properties": {
        "data": {
          "$ref": "#/definitions/OrderAddressModel"
        }
      }
    },
    "OrderAddressModel": {
      "properties": {
        "customerDelivery": {
          "$ref": "#/definitions/AddressModel"
        },
        "customerInvoice": {
          "$ref": "#/definitions/AddressModel"
        },
        "originalDelivery": {
          "$ref": "#/definitions/AddressModel"
        },
        "originalInvoice": {
          "$ref": "#/definitions/AddressModel"
        },
        "paymentMethodDelivery": {
          "$ref": "#/definitions/AddressModel"
        },
        "paymentMethodInvoice": {
          "$ref": "#/definitions/AddressModel"
        }
      },
      "type": "object"
    },
    "OrderCommentModel": {
      "properties": {
        "commentId": {
          "description": "The comments id",
          "example": 1,
          "readOnly": true,
          "type": "integer"
        },
        "createdAt": {
          "description": "A timestamp of when the comment was created. The time should be formatted using ISO-8601",
          "example": "2018-08-29T11:42:23+02:00",
          "readOnly": true,
          "type": "string"
        },
        "from": {
          "description": "The author of the comment. Either ”admin” or ”customer”",
          "example": "customer",
          "readOnly": true,
          "type": "string"
        },
        "text": {
          "description": "The comment",
          "example": "Lorem ipsum",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrderCommentModelCollection": {
      "properties": {
        "data": {
          "description": "A list of order comments",
          "items": {
            "$ref": "#/definitions/OrderCommentModel"
          },
          "type": "array"
        }
      }
    },
    "OrderCommentModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/OrderCommentModel"
        }
      }
    },
    "OrderExternalServiceModel": {
      "properties": {
        "externalIdValue": {
          "description": "The external id",
          "example": "ABC123",
          "maxLength": 40,
          "type": "string"
        },
        "readOnly": {
          "description": "Some external services cannot be updated and they have readOnly set to true",
          "example": false,
          "readOnly": true,
          "type": "boolean"
        },
        "serviceName": {
          "description": "The service name that this external id is linked to",
          "example": "Fortnox",
          "maxLength": 40,
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrderExternalServiceModelCollection": {
      "properties": {
        "data": {
          "description": "A list of order external services",
          "items": {
            "$ref": "#/definitions/OrderExternalServiceModel"
          },
          "type": "array"
        }
      }
    },
    "OrderExternalServicesModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/OrderExternalServiceModel"
        }
      }
    },
    "OrderItemModel": {
      "properties": {
        "description": {
          "description": "The description of the order item",
          "example": "An item",
          "maxLength": 255,
          "type": "string"
        },
        "discount": {
          "description": "The discount for the entire order row. Either as a percentage or an amount. If this is an amount and set to 20.0, the sum 20.0 will be subtracted from the order total no matter what the quantity is set to.",
          "example": 8,
          "minimum": 0,
          "type": "number"
        },
        "discountType": {
          "description": "The type of discount. Either ”amount” or ”percent”. Default is ”percent”",
          "enum": [
            "amount",
            "percent"
          ],
          "example": "percent",
          "type": "string"
        },
        "itemId": {
          "description": "The id of the order item",
          "example": 1,
          "readOnly": true,
          "type": "integer"
        },
        "quantity": {
          "description": "The quantity of the order item",
          "example": 1,
          "maximum": 1000000,
          "minimum": 1,
          "type": "integer"
        },
        "sku": {
          "description": "The SKU of the order item",
          "example": "ABC123",
          "maxLength": 40,
          "type": "string"
        },
        "sortIndex": {
          "description": "The sort order of the order items",
          "minimum": 0,
          "type": "integer"
        },
        "unitPrice": {
          "description": "The price per unit excluding VAT",
          "example": 23.2,
          "type": "number"
        },
        "unitSymbol": {
          "description": "The unit symbol of the order item",
          "example": "pcs.",
          "maxLength": 5,
          "type": "string"
        },
        "vatRate": {
          "description": "The items VAT rate in percent. 25.0 = 25% VAT",
          "example": 25,
          "maximum": 100,
          "minimum": 0,
          "type": "number"
        }
      },
      "type": "object"
    },
    "OrderItemModelCollection": {
      "properties": {
        "data": {
          "description": "A list of order items",
          "items": {
            "$ref": "#/definitions/OrderItemModel"
          },
          "type": "array"
        }
      }
    },
    "OrderItemModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/OrderItemModel"
        }
      }
    },
    "OrderModel": {
      "properties": {
        "addresses": {
          "$ref": "#/definitions/OrderAddressCollection"
        },
        "amountPaid": {
          "description": "The amount paid via the payment method for this order",
          "example": 778,
          "type": "number"
        },
        "amountPaidInBaseCurrency": {
          "description": "Same as amountPaid, but in the shops base currency",
          "example": 778,
          "readOnly": true,
          "type": "number"
        },
        "amountToPay": {
          "description": "The total order amount to pay",
          "example": 778,
          "readOnly": true,
          "type": "number"
        },
        "amountToPayInBaseCurrency": {
          "description": "The total amount to pay, in the shops base currency",
          "example": 778,
          "readOnly": true,
          "type": "number"
        },
        "baseCurrencyCode": {
          "description": "The shops base currency code at the point of order creation",
          "example": "SEK",
          "readOnly": true,
          "type": "string"
        },
        "createdAt": {
          "description": "A timestamp of when the order was created. The time should be formatted using ISO-8601",
          "example": "2018-08-29T11:42:23+02:00",
          "type": "string"
        },
        "currencyCode": {
          "description": "The currency code of the currency that was used for this order. Has to be a valid ISO 4217 currency code",
          "example": "SEK",
          "maxLength": 3,
          "minLength": 3,
          "type": "string"
        },
        "currencyExchangeRate": {
          "description": "The exchange rate between this orders currency and the shops base currency. Ff, for example, the shop base currency is SEK and this order was placed in NOK, where 1 SEK = 0.97 NOK - this value would be 0.97",
          "example": 0.97,
          "type": "number"
        },
        "currencyPrecision": {
          "description": "The number of decimals to display",
          "example": 2,
          "type": "integer"
        },
        "customInfo1": {
          "description": "Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection",
          "maxLength": 255,
          "type": "string"
        },
        "customInfo2": {
          "description": "Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection",
          "maxLength": 255,
          "type": "string"
        },
        "customInfo3": {
          "description": "Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection",
          "maxLength": 255,
          "type": "string"
        },
        "customInfo4": {
          "description": "Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection",
          "maxLength": 255,
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/CustomerModelItem"
        },
        "customerId": {
          "description": "The ID of the orders customer",
          "example": 101,
          "type": "integer"
        },
        "discountCode": {
          "description": "The code ID of a discount code that was used for this order",
          "maxLength": 20,
          "type": "string"
        },
        "externalServices": {
          "$ref": "#/definitions/OrderExternalServiceModelCollection"
        },
        "hasComment": {
          "description": "Whether the customer or an admin has added a comment to the order",
          "readOnly": true,
          "type": "boolean"
        },
        "internalComment": {
          "description": "An internal comment placed by an administrator. Not available to the customer",
          "example": "Lorem ipsum...",
          "type": "string"
        },
        "isComplete": {
          "description": "Is the order completed (that is, is it completely saved and has the payment method processed and confirmed it)",
          "example": true,
          "type": "boolean"
        },
        "isRead": {
          "description": "An order is read when an administrator has read it via the admin GUI",
          "type": "boolean"
        },
        "items": {
          "$ref": "#/definitions/OrderItemModelCollection"
        },
        "langCode": {
          "description": "Language Code (ISO 639-1) used for placing this order. Has to be a valid lang code that the shop has setup. Used for order update emails, etc. ",
          "example": "sv",
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "modifiedAt": {
          "description": "A timestamp of when the order was modified. The time should be formatted using ISO-8601",
          "example": "2018-08-29T11:42:23+02:00",
          "readOnly": true,
          "type": "string"
        },
        "onOrderStatusChangeProcessPayment": {
          "default": true,
          "description": "Set this to false to prevent processing payment on changes to statusId. Only applies to payment methods that support processing payments. For example charging a reserved amount or cancel a created invoice",
          "example": true,
          "type": "boolean",
          "writeOnly": true
        },
        "onOrderStatusChangeSendEmail": {
          "default": true,
          "description": "Set this to false to prevent sending email to customer on changes to statusId and new orders for a single call",
          "example": true,
          "type": "boolean",
          "writeOnly": true
        },
        "orderId": {
          "description": "The orders ID",
          "example": 101,
          "readOnly": true,
          "type": "integer"
        },
        "originalCustomerCustomInfo1": {
          "description": "Custom customer info at the point of order creation",
          "type": "string"
        },
        "originalCustomerCustomInfo2": {
          "description": "Custom customer info at the point of order creation",
          "type": "string"
        },
        "originalCustomerEmail": {
          "description": "The email address of the customer at the point of order creation",
          "example": "john.doe@example.net",
          "type": "string"
        },
        "originalCustomerNationalIdNo": {
          "description": "The national id number of the customer at the point of order creation",
          "type": "string"
        },
        "originalCustomerVatNo": {
          "description": "The VAT number of the customer at the point of order creation",
          "type": "string"
        },
        "paymentFee": {
          "description": "Payment fee",
          "example": 23.2,
          "minimum": 0,
          "type": "number"
        },
        "paymentMethodId": {
          "description": "The ID of the orders payment method",
          "example": 1,
          "type": "integer"
        },
        "paymentMethodIdCode": {
          "description": "The ID code of the payment method.",
          "example": "custom",
          "readOnly": true,
          "type": "string"
        },
        "paymentMethodName": {
          "description": "Title of the orders payment method",
          "example": "Bankgiro",
          "maxLength": 30,
          "type": "string"
        },
        "paymentReference": {
          "description": "Reference to the payment methods payment transaction",
          "maxLength": 80,
          "type": "string"
        },
        "paymentStatus": {
          "description": "Status of the payment methods payment transaction",
          "example": "reserved",
          "maxLength": 20,
          "type": "string"
        },
        "paymentVatRate": {
          "description": "The VAT rate of the paymentFee in percent",
          "example": 25,
          "type": "number"
        },
        "sendEmailsOnStatusChange": {
          "default": true,
          "description": "Set this to false to prevent sending email to customer on changes to statusId and new orders for this and all future calls",
          "example": true,
          "type": "boolean"
        },
        "shippingCost": {
          "description": "Shipping cost",
          "example": 23.2,
          "minimum": 0,
          "type": "number"
        },
        "shippingMethodId": {
          "description": "The ID of the orders shipping method",
          "example": 1,
          "type": "integer"
        },
        "shippingMethodName": {
          "description": "Title of the orders shipping method",
          "example": "UPS International",
          "maxLength": 30,
          "type": "string"
        },
        "shippingTrackerType": {
          "description": "The ID of the tracking number type. Types are available via: GET /shipping-tracker-types",
          "example": 1,
          "type": "integer"
        },
        "shippingTrackingNo": {
          "description": "The shipping tracking number. Has to be in the format that is used for the chosen tracking type (please contact the freight forwarder regarding this).",
          "maxLength": 50,
          "type": "string"
        },
        "shippingVatRate": {
          "description": "The VAT rate of the shippingCost in percent",
          "example": 25,
          "type": "number"
        },
        "shopCountryCode": {
          "description": "The shops country code at the point of order creation",
          "example": "SE",
          "readOnly": true,
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/OrderStatusModelItem"
        },
        "statusId": {
          "description": "The ID of the orders status",
          "example": 1,
          "type": "integer"
        },
        "totalAmount": {
          "description": "The total order amount",
          "example": 622.4,
          "readOnly": true,
          "type": "number"
        },
        "totalAmountInBaseCurrency": {
          "description": "The total order amount, in the shops base currency",
          "example": 778,
          "readOnly": true,
          "type": "number"
        },
        "totalVat": {
          "description": "The total order VAT amount",
          "example": 155.6,
          "readOnly": true,
          "type": "number"
        },
        "totalVatInBaseCurrency": {
          "description": "The total VAT amount, in the shops base currency",
          "example": 115.6,
          "readOnly": true,
          "type": "number"
        },
        "totalWeight": {
          "description": "The total weight of the order in kg. This field is a calculated summary of all order items",
          "example": 0.9,
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "OrderModelCollection": {
      "properties": {
        "data": {
          "description": "A list of orders",
          "items": {
            "$ref": "#/definitions/OrderModel"
          },
          "type": "array"
        },
        "meta": {
          "properties": {
            "pagination": {
              "$ref": "#/definitions/PaginationModel"
            }
          },
          "type": "object"
        }
      }
    },
    "OrderModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/OrderModel"
        }
      }
    },
    "OrderStatusLanguageModel": {
      "properties": {
        "langCode": {
          "description": "Language Code (ISO 639-1) for this translation. Has to be a valid lang code that the shop has setup. ",
          "example": "sv",
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "The name of this order status",
          "example": "Order Created",
          "maxLength": 64,
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrderStatusModel": {
      "properties": {
        "idCode": {
          "description": "Standard order statuses has an idCode as well. These are: created, picking, completed, canceled",
          "example": "created",
          "readOnly": true,
          "type": "string"
        },
        "languages": {
          "items": {
            "$ref": "#/definitions/OrderStatusLanguageModel"
          },
          "type": "array"
        },
        "sendEmail": {
          "description": "Should an order status update email be sent out when an order gets this status",
          "type": "boolean"
        },
        "statusId": {
          "description": "The id of the order status",
          "example": 1,
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OrderStatusModelCollection": {
      "properties": {
        "data": {
          "description": "A list of order statuses",
          "items": {
            "$ref": "#/definitions/OrderStatusModel"
          },
          "type": "array"
        }
      }
    },
    "OrderStatusModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/OrderStatusModel"
        }
      }
    },
    "OrderUpdateModel": {
      "properties": {
        "addresses": {
          "$ref": "#/definitions/OrderAddressModel"
        },
        "amountPaid": {
          "description": "The amount paid via the payment method for this order",
          "example": 778,
          "type": "number"
        },
        "amountPaidInBaseCurrency": {
          "description": "Same as amountPaid, but in the shops base currency",
          "example": 778,
          "readOnly": true,
          "type": "number"
        },
        "amountToPay": {
          "description": "The total order amount to pay",
          "example": 778,
          "readOnly": true,
          "type": "number"
        },
        "amountToPayInBaseCurrency": {
          "description": "The total amount to pay, in the shops base currency",
          "example": 778,
          "readOnly": true,
          "type": "number"
        },
        "baseCurrencyCode": {
          "description": "The shops base currency code at the point of order creation",
          "example": "SEK",
          "readOnly": true,
          "type": "string"
        },
        "createdAt": {
          "description": "A timestamp of when the order was created. The time should be formatted using ISO-8601",
          "example": "2018-08-29T11:42:23+02:00",
          "type": "string"
        },
        "currencyCode": {
          "description": "The currency code of the currency that was used for this order. Has to be a valid ISO 4217 currency code",
          "example": "SEK",
          "maxLength": 3,
          "minLength": 3,
          "type": "string"
        },
        "currencyExchangeRate": {
          "description": "The exchange rate between this orders currency and the shops base currency. Ff, for example, the shop base currency is SEK and this order was placed in NOK, where 1 SEK = 0.97 NOK - this value would be 0.97",
          "example": 0.97,
          "type": "number"
        },
        "currencyPrecision": {
          "description": "The number of decimals to display",
          "example": 2,
          "type": "integer"
        },
        "customInfo1": {
          "description": "Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection",
          "maxLength": 255,
          "type": "string"
        },
        "customInfo2": {
          "description": "Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection",
          "maxLength": 255,
          "type": "string"
        },
        "customInfo3": {
          "description": "Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection",
          "maxLength": 255,
          "type": "string"
        },
        "customInfo4": {
          "description": "Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection",
          "maxLength": 255,
          "type": "string"
        },
        "customerId": {
          "description": "The ID of the orders customer",
          "example": 101,
          "type": "integer"
        },
        "discountCode": {
          "description": "The code ID of a discount code that was used for this order",
          "maxLength": 20,
          "type": "string"
        },
        "hasComment": {
          "description": "Whether the customer or an admin has added a comment to the order",
          "readOnly": true,
          "type": "boolean"
        },
        "internalComment": {
          "description": "An internal comment placed by an administrator. Not available to the customer",
          "example": "Lorem ipsum...",
          "type": "string"
        },
        "isComplete": {
          "description": "Is the order completed (that is, is it completely saved and has the payment method processed and confirmed it)",
          "example": true,
          "type": "boolean"
        },
        "isRead": {
          "description": "An order is read when an administrator has read it via the admin GUI",
          "type": "boolean"
        },
        "items": {
          "description": "A collection of order items",
          "items": {
            "$ref": "#/definitions/OrderItemModel"
          },
          "type": "array"
        },
        "langCode": {
          "description": "Language Code (ISO 639-1) used for placing this order. Has to be a valid lang code that the shop has setup. Used for order update emails, etc.",
          "example": "sv",
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "modifiedAt": {
          "description": "A timestamp of when the order was modified. The time should be formatted using ISO-8601",
          "example": "2018-08-29T11:42:23+02:00",
          "readOnly": true,
          "type": "string"
        },
        "onOrderStatusChangeProcessPayment": {
          "default": true,
          "description": "Set this to false to prevent processing payment on changes to statusId. Only applies to payment methods that support processing payments. For example charging a reserved amount or cancel a created invoice",
          "example": true,
          "type": "boolean",
          "writeOnly": true
        },
        "onOrderStatusChangeSendEmail": {
          "default": true,
          "description": "Set this to false to prevent sending email to customer on changes to statusId and new orders",
          "example": true,
          "type": "boolean",
          "writeOnly": true
        },
        "orderId": {
          "description": "The orders ID",
          "example": 101,
          "readOnly": true,
          "type": "integer"
        },
        "originalCustomerCustomInfo1": {
          "description": "Custom customer info at the point of order creation",
          "type": "string"
        },
        "originalCustomerCustomInfo2": {
          "description": "Custom customer info at the point of order creation",
          "type": "string"
        },
        "originalCustomerEmail": {
          "description": "The email address of the customer at the point of order creation",
          "example": "john.doe@example.net",
          "type": "string"
        },
        "originalCustomerNationalIdNo": {
          "description": "The national id number of the customer at the point of order creation",
          "type": "string"
        },
        "originalCustomerVatNo": {
          "description": "The VAT number of the customer at the point of order creation",
          "type": "string"
        },
        "paymentFee": {
          "description": "Payment fee",
          "example": 23.2,
          "minimum": 0,
          "type": "number"
        },
        "paymentMethodId": {
          "description": "The ID of the orders payment method",
          "example": 1,
          "type": "integer"
        },
        "paymentMethodIdCode": {
          "description": "The ID code of the payment method.",
          "example": "custom",
          "readOnly": true,
          "type": "string"
        },
        "paymentMethodName": {
          "description": "Title of the orders payment method",
          "example": "Bankgiro",
          "maxLength": 30,
          "type": "string"
        },
        "paymentReference": {
          "description": "Reference to the payment methods payment transaction",
          "maxLength": 80,
          "type": "string"
        },
        "paymentStatus": {
          "description": "Status of the payment methods payment transaction",
          "example": "reserved",
          "maxLength": 20,
          "type": "string"
        },
        "paymentVatRate": {
          "description": "The VAT rate of the paymentFee in percent",
          "example": 25,
          "type": "number"
        },
        "shippingCost": {
          "description": "Shipping cost",
          "example": 23.2,
          "minimum": 0,
          "type": "number"
        },
        "shippingMethodId": {
          "description": "The ID of the orders shipping method",
          "example": 1,
          "type": "integer"
        },
        "shippingMethodName": {
          "description": "Title of the orders shipping method",
          "example": "UPS International",
          "maxLength": 30,
          "type": "string"
        },
        "shippingTrackerType": {
          "description": "The ID of the tracking number type. Types are available via: GET /shipping-tracker-types",
          "example": 1,
          "type": "integer"
        },
        "shippingTrackingNo": {
          "description": "The shipping tracking number. Has to be in the format that is used for the chosen tracking type (please contact the freight forwarder regarding this).",
          "maxLength": 50,
          "type": "string"
        },
        "shippingVatRate": {
          "description": "The VAT rate of the shippingCost in percent",
          "example": 25,
          "type": "number"
        },
        "shopCountryCode": {
          "description": "The shops country code at the point of order creation",
          "example": "SE",
          "readOnly": true,
          "type": "string"
        },
        "statusId": {
          "description": "The ID of the orders status",
          "example": 1,
          "type": "integer"
        },
        "totalAmount": {
          "description": "The total order amount",
          "example": 622.4,
          "readOnly": true,
          "type": "number"
        },
        "totalAmountInBaseCurrency": {
          "description": "The total order amount, in the shops base currency",
          "example": 778,
          "readOnly": true,
          "type": "number"
        },
        "totalVat": {
          "description": "The total order VAT amount",
          "example": 155.6,
          "readOnly": true,
          "type": "number"
        },
        "totalVatInBaseCurrency": {
          "description": "The total VAT amount, in the shops base currency",
          "example": 115.6,
          "readOnly": true,
          "type": "number"
        },
        "totalWeight": {
          "description": "The total weight of the order in kg. This field is a calculated summary of all order items",
          "example": 0.9,
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "PaginationModel": {
      "properties": {
        "count": {
          "description": "Number of items on this page",
          "example": 24,
          "readOnly": true,
          "type": "integer"
        },
        "current_page": {
          "description": "The current requested page",
          "example": 1,
          "readOnly": true,
          "type": "integer"
        },
        "per_page": {
          "description": "Number of items per page",
          "example": 100,
          "readOnly": true,
          "type": "integer"
        },
        "total": {
          "description": "The total number of items",
          "example": 24,
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PaymentMethodLanguageModel": {
      "properties": {
        "langCode": {
          "description": "Language code",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Name of payment method",
          "readOnly": true,
          "type": "string"
        },
        "shortDescription": {
          "description": "A shorter informative description",
          "readOnly": true,
          "type": "string"
        },
        "title": {
          "description": "Title of payment method",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "PaymentMethodLanguageModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of payment method languages",
          "items": {
            "$ref": "#/definitions/PaymentMethodLanguageModel"
          },
          "type": "array"
        }
      }
    },
    "PaymentMethodModel": {
      "properties": {
        "active": {
          "description": "If the payment method is actively available on checkout or not",
          "readOnly": true,
          "type": "boolean"
        },
        "fee": {
          "description": "Fee associated with this method",
          "format": "float",
          "minimum": 0,
          "readOnly": true,
          "type": "number"
        },
        "idCode": {
          "description": "The payment methods idCode. This can be used to identify a payment method of a standarized type",
          "example": "custom",
          "readOnly": true,
          "type": "string"
        },
        "isClickAndCollect": {
          "description": "Tells whether this method is a \"click and collect\" or not",
          "example": false,
          "nullable": false,
          "readOnly": true,
          "type": "boolean"
        },
        "languages": {
          "$ref": "#/definitions/PaymentMethodLanguageModelCollection"
        },
        "paymentMethodId": {
          "description": "The payment methods Id",
          "example": 1,
          "readOnly": true,
          "type": "integer"
        },
        "validCountriesSelected": {
          "description": "The countries this method is valid for (if validForCountries is set to ”selected”)",
          "items": {
            "description": "Country code",
            "example": "SE",
            "maxLength": 2,
            "minLength": 2,
            "readOnly": true,
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "validForCountries": {
          "description": "The restrictions to countries this payment method is valid for. Valid values are: all, EU, non-EU, selected, none",
          "enum": [
            "all",
            "EU",
            "non-EU",
            "selected",
            "none"
          ],
          "example": "all",
          "readOnly": true,
          "type": "string"
        },
        "validForCustomerType": {
          "description": "The customer type this method is valid for. Valid values are: null (no restriction), person, company",
          "nullable": true,
          "readOnly": true,
          "type": "string"
        },
        "validForMaxItemsSubtotal": {
          "description": "The max order sub total that this method is valid for",
          "format": "float",
          "minimum": 0,
          "nullable": true,
          "readOnly": true,
          "type": "number"
        },
        "validForMaxWeight": {
          "description": "The max order weight that this method is valid for.",
          "format": "float",
          "minimum": 0,
          "nullable": true,
          "readOnly": true,
          "type": "number"
        },
        "validForMinItemsSubtotal": {
          "description": "The min order sub total that this method is valid for",
          "format": "float",
          "minimum": 0,
          "nullable": true,
          "readOnly": true,
          "type": "number"
        },
        "validForMinWeight": {
          "description": "The min order weight that this method is valid for",
          "format": "float",
          "minimum": 0,
          "nullable": true,
          "readOnly": true,
          "type": "number"
        },
        "validForShippingMethods": {
          "description": "The shipping methods this is valid for. Valid values are: all, selected",
          "enum": [
            "all",
            "selected"
          ],
          "example": "all",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "PaymentMethodModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of payment methods",
          "items": {
            "$ref": "#/definitions/PaymentMethodModel"
          },
          "type": "array"
        }
      }
    },
    "PaymentMethodModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/PaymentMethodModel"
        }
      }
    },
    "PricelistModel": {
      "properties": {
        "countryCodes": {
          "description": "The countryCodes this pricelist is valid for",
          "example": [
            "SE",
            "DK"
          ],
          "items": {
            "example": "SE",
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "currencyCode": {
          "description": "The currencyCode this pricelist is valid for",
          "example": "SEK",
          "maxLength": 3,
          "minLength": 3,
          "readOnly": true,
          "type": "string"
        },
        "isCountryPricelist": {
          "description": "Is this pricelist a ”country” pricelist (base pricelist for a certain country)",
          "type": "boolean"
        },
        "isCustomerPricelist": {
          "description": "Is this pricelist a ”customer” pricelist (for selected customer groups)",
          "type": "boolean"
        },
        "isMaster": {
          "description": "If this pricelist is the default ”master” pricelist or not. Only one pricelist can be the master pricelist",
          "example": true,
          "readOnly": true,
          "type": "boolean"
        },
        "name": {
          "description": "The name of this pricelist",
          "example": "My pricelist",
          "maxLength": 30,
          "readOnly": true,
          "type": "string"
        },
        "parentPricelistId": {
          "description": "Does this pricelist has a parent price list. ",
          "type": "integer"
        },
        "pricelistId": {
          "description": "The shipping methods Id",
          "example": 1,
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PricelistModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of shipping methods",
          "items": {
            "$ref": "#/definitions/PricelistModel"
          },
          "type": "array"
        }
      }
    },
    "PricelistModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/PricelistModel"
        }
      }
    },
    "ProductCategoryLanguagesModel": {
      "properties": {
        "bottomDescription": {
          "description": "The extra/bottom description of this product category",
          "example": "Lorem ipsum...",
          "maxLength": 65535,
          "type": "string"
        },
        "description": {
          "description": "The main/top description of this product category",
          "example": "Lorem ipsum...",
          "maxLength": 65535,
          "type": "string"
        },
        "langCode": {
          "description": "Language Code (ISO 639-1) for this translation. Has to be a valid lang code that the shop supports. ",
          "example": "sv",
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "The name of this product category",
          "example": "My category",
          "maxLength": 90,
          "type": "string"
        },
        "pageMetaDescription": {
          "description": "The page meta data description of this product category",
          "example": "Lorem ipsum...",
          "maxLength": 278,
          "type": "string"
        },
        "pageTitle": {
          "description": "The page title for this product category",
          "example": "My category - find products here!",
          "maxLength": 90,
          "type": "string"
        },
        "permalink": {
          "description": "The permalink to this product category. Will auto generate if left out",
          "example": "my-category",
          "maxLength": 128,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductCategoryLinkModel": {
      "properties": {
        "categoryId": {
          "description": "The category id this product should be listed in",
          "nullable": false,
          "type": "integer"
        },
        "sortIndex": {
          "description": "The sort index this product have in the category",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProductCategoryLinkModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of product category links",
          "items": {
            "$ref": "#/definitions/ProductCategoryLinkModel"
          },
          "type": "array"
        }
      }
    },
    "ProductCategoryLinkModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductCategoryLinkModel"
        }
      }
    },
    "ProductCategoryModel": {
      "properties": {
        "categoryId": {
          "description": "The product category Id",
          "example": 101,
          "readOnly": true,
          "type": "integer"
        },
        "externalId": {
          "description": "The external Id for this category for the system named in externalType",
          "example": "123",
          "maxLength": 40,
          "type": "string"
        },
        "externalType": {
          "description": "The system name the externalId belongs to.",
          "example": "Fortnox",
          "maxLength": 20,
          "type": "string"
        },
        "hasChildren": {
          "description": "Whether or not the category has any children categories",
          "example": true,
          "readOnly": true,
          "type": "boolean"
        },
        "imageFileId": {
          "description": "The Id to the category`s image file. Has to be an existing mediaFile",
          "example": 14,
          "type": "integer"
        },
        "languages": {
          "items": {
            "$ref": "#/definitions/ProductCategoryLanguagesModel"
          },
          "type": "array"
        },
        "openPage": {
          "description": "Whether or not links to the category should open a category page listing its products and sub categories on click.",
          "example": true,
          "type": "boolean"
        },
        "parentId": {
          "description": "The category`s parent`s Id",
          "example": 99,
          "type": "integer"
        },
        "sortIndex": {
          "description": "Sort index. A category with a lower value is displayed higher up in lists",
          "example": 9,
          "type": "integer"
        },
        "visibility": {
          "description": "The category`s visibility settings. Possible values are: visible, hidden and pricelists. Pricelists means that the category is only visible for customers with access to specific pricelists",
          "example": "visible",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductCategoryModelCollection": {
      "properties": {
        "data": {
          "description": "A list of product categories",
          "items": {
            "$ref": "#/definitions/ProductCategoryModel"
          },
          "type": "array"
        },
        "meta": {
          "properties": {
            "pagination": {
              "$ref": "#/definitions/PaginationModel"
            }
          },
          "type": "object"
        }
      }
    },
    "ProductCategoryModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductCategoryModel"
        }
      }
    },
    "ProductLanguageModel": {
      "properties": {
        "langCode": {
          "description": "The langCode for this language. Supported language codes are: sv, en, no, da, fi, de, fr, es",
          "type": "string"
        },
        "longDescription": {
          "description": "The products long description",
          "maxLength": 65535,
          "type": "string"
        },
        "name": {
          "description": "The products name",
          "maxLength": 150,
          "type": "string"
        },
        "pageMetaDescription": {
          "description": "The meta description for this product",
          "maxLength": 278,
          "type": "string"
        },
        "pageTitle": {
          "description": "The page title for this product",
          "maxLength": 90,
          "type": "string"
        },
        "permalink": {
          "description": "The permalink for this product and language",
          "maxLength": 128,
          "type": "string"
        },
        "shortDescription": {
          "description": "The products short description",
          "maxLength": 65535,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductLanguageModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of product languages",
          "items": {
            "$ref": "#/definitions/ProductLanguageModel"
          },
          "type": "array"
        }
      }
    },
    "ProductLanguageModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductLanguageModel"
        }
      }
    },
    "ProductManufacturerModel": {
      "properties": {
        "manufacturerId": {
          "description": "The id of this manufacturer",
          "example": 2,
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "description": "The name of this manufacturer",
          "example": "Example Ltd.",
          "maxLength": 30,
          "type": "string"
        },
        "url": {
          "description": "The URL to the manufacturers website",
          "example": "https://example.net",
          "maxLength": 255,
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "ProductManufacturerModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of product manufacturers",
          "items": {
            "$ref": "#/definitions/ProductManufacturerModel"
          },
          "type": "array"
        }
      }
    },
    "ProductManufacturerModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductManufacturerModel"
        }
      }
    },
    "ProductMediaFileLinkModel": {
      "properties": {
        "mediaFileId": {
          "description": "The media file this link points to. You can fetch available media files from the /media-files endpoint",
          "nullable": false,
          "type": "integer"
        },
        "productMediaFileId": {
          "description": "This links ID",
          "readOnly": true,
          "type": "integer"
        },
        "sortIndex": {
          "description": "The sort index of these media file links. Note that after the item is saved the sort index will be rearranged so that the item with the lowest sort index always get sort index 0, the next one 1, and so on.",
          "type": "integer"
        },
        "type": {
          "description": "The type of file this link points to. Can be either ”image” or ”document”",
          "example": "image",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductMediaFileLinkModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of product media file links",
          "items": {
            "$ref": "#/definitions/ProductMediaFileLinkModel"
          },
          "type": "array"
        }
      }
    },
    "ProductMediaFileLinkModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductMediaFileLinkModel"
        }
      }
    },
    "ProductMetaDataModel": {
      "properties": {
        "languages": {
          "$ref": "#/definitions/ProductMetaLanguageDataModelCollection"
        },
        "metaDataTypeId": {
          "description": "The ID of the meta data type. Available meta data types can be fetched using the /product-meta-data-types endpoint",
          "type": "integer"
        },
        "sortIndex": {
          "description": "The sort index of this meta data for this product",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProductMetaDataModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of product meta data",
          "items": {
            "$ref": "#/definitions/ProductMetaDataModel"
          },
          "type": "array"
        }
      }
    },
    "ProductMetaDataModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductMetaDataModel"
        }
      }
    },
    "ProductMetaDataModelUpdatable": {
      "properties": {
        "languages": {
          "description": "A collection of product meta data languages",
          "items": {
            "$ref": "#/definitions/ProductMetaLanguageDataModel"
          },
          "type": "array"
        },
        "metaDataTypeId": {
          "description": "The ID of the meta data type. Available meta data types can be fetched using the /product-meta-data-types endpoint",
          "type": "integer"
        },
        "sortIndex": {
          "description": "The sort index of this meta data for this product",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProductMetaDataTypeLanguageModel": {
      "properties": {
        "langCode": {
          "description": "The language code for this language",
          "example": "sv",
          "type": "string"
        },
        "name": {
          "description": "The name of this meta data type",
          "example": "ISBN",
          "maxLength": 40,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductMetaDataTypeLanguageModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of product meta data type languages",
          "items": {
            "$ref": "#/definitions/ProductMetaDataTypeLanguageModel"
          },
          "type": "array"
        }
      }
    },
    "ProductMetaDataTypeModel": {
      "properties": {
        "languages": {
          "$ref": "#/definitions/ProductMetaDataTypeLanguageModelCollection"
        },
        "metaDataTypeId": {
          "description": "The meta data type id",
          "example": 1,
          "format": "int32",
          "minimum": 1,
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProductMetaDataTypeModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of product meta data types",
          "items": {
            "$ref": "#/definitions/ProductMetaDataTypeModel"
          },
          "type": "array"
        }
      }
    },
    "ProductMetaDataTypeModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductMetaDataTypeModel"
        }
      }
    },
    "ProductMetaLanguageDataModel": {
      "properties": {
        "langCode": {
          "description": "The langCode for this language",
          "type": "string"
        },
        "value": {
          "description": "The value for this meta data",
          "maxLength": 255,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductMetaLanguageDataModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of product meta data",
          "items": {
            "$ref": "#/definitions/ProductMetaLanguageDataModel"
          },
          "type": "array"
        }
      }
    },
    "ProductMetaLanguageDataModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductMetaLanguageDataModel"
        }
      }
    },
    "ProductModel": {
      "properties": {
        "accounting": {
          "description": "Account number for managing accounting on product level",
          "maximum": 9999,
          "minimum": 100,
          "nullable": true,
          "type": "integer"
        },
        "categories": {
          "$ref": "#/definitions/ProductCategoryLinkModelCollection"
        },
        "createdAt": {
          "description": "A timestamp of when the product was created. The time should be formatted using ISO-8601",
          "example": "2018-08-29T11:42:23+02:00",
          "type": "string"
        },
        "defaultVatRate": {
          "description": "The default vat rate for this product. Will fall back to shop default if null. To fetch country specific vat rates, please use include=vatRates or use the /products/x/vat-rates endpoint.",
          "nullable": true,
          "type": "string"
        },
        "hasSeveralVariants": {
          "description": "Indicates if the products has several variants or not. The remaining variants can be fetched using the /products/{product id}/variants endpoint",
          "example": false,
          "readOnly": true,
          "type": "boolean"
        },
        "isBackInStockWatchable": {
          "default": true,
          "description": "Should this product be watchable for customers when it is back in stock?",
          "type": "boolean"
        },
        "languages": {
          "$ref": "#/definitions/ProductLanguageModelCollection"
        },
        "manufacturerId": {
          "description": "The id of the manufacturer to use for this product. Fetch and handle available manufacturers using the /product-manufacturers endpoint",
          "nullable": true,
          "type": "integer"
        },
        "mediaFiles": {
          "$ref": "#/definitions/ProductMediaFileLinkModelCollection"
        },
        "metaData": {
          "$ref": "#/definitions/ProductMetaDataModelCollection"
        },
        "modifiedAt": {
          "description": "A timestamp of when the product was modified. The time should be formatted using ISO-8601",
          "example": "2018-08-29T11:42:23+02:00",
          "readOnly": true,
          "type": "string"
        },
        "moreInfoUrl": {
          "description": "A valid URL to a web page with more information for this product",
          "maxLength": 255,
          "type": "string"
        },
        "productId": {
          "example": 101,
          "readOnly": true,
          "type": "integer"
        },
        "sortIndex": {
          "description": "Sort index for this product in a list",
          "maximum": 10000,
          "minimum": 1,
          "nullable": true,
          "type": "integer"
        },
        "unit": {
          "$ref": "#/definitions/ProductUnitModelItem"
        },
        "unitId": {
          "description": "The id of the unit to use for this product if not standard. Fetch and handle available units using the /product-units endpoint",
          "nullable": true,
          "type": "integer"
        },
        "variants": {
          "$ref": "#/definitions/ProductVariantModelCollection"
        },
        "vatRates": {
          "$ref": "#/definitions/ProductVatRateModelCollection"
        },
        "visibility": {
          "default": "hidden",
          "description": "The visibility of this product. Supported values are: hidden, visible, pricelists",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of products",
          "items": {
            "$ref": "#/definitions/ProductModel"
          },
          "type": "array"
        },
        "meta": {
          "properties": {
            "pagination": {
              "$ref": "#/definitions/PaginationModel"
            }
          },
          "type": "object"
        }
      }
    },
    "ProductModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductModel"
        }
      }
    },
    "ProductModelUpdatable": {
      "properties": {
        "accounting": {
          "description": "Account number for managing accounting on product level",
          "maximum": 9999,
          "minimum": 100,
          "nullable": true,
          "type": "integer"
        },
        "categories": {
          "description": "A collection of categories",
          "items": {
            "$ref": "#/definitions/ProductCategoryLinkModel"
          },
          "type": "array"
        },
        "createdAt": {
          "description": "A timestamp of when the product was created. The time should be formatted using ISO-8601",
          "example": "2018-08-29T11:42:23+02:00",
          "type": "string"
        },
        "defaultVatRate": {
          "description": "The default vat rate for this product. Will fall back to shop default if null. To fetch country specific vat rates, please use include=vatRates or use the /products/x/vat-rates endpoint.",
          "nullable": true,
          "type": "string"
        },
        "hasSeveralVariants": {
          "description": "Indicates if the products has several variants or not. The remaining variants can be fetched using the /products/{product id}/variants endpoint",
          "example": false,
          "readOnly": true,
          "type": "boolean"
        },
        "isBackInStockWatchable": {
          "default": true,
          "description": "Should this product be watchable for customers when it is back in stock?",
          "type": "boolean"
        },
        "languages": {
          "description": "A collection of product languages",
          "items": {
            "$ref": "#/definitions/ProductLanguageModel"
          },
          "type": "array"
        },
        "manufacturerId": {
          "description": "The id of the manufacturer to use for this product. Fetch and handle available manufacturers using the /product-manufacturers endpoint",
          "nullable": true,
          "type": "integer"
        },
        "mediaFiles": {
          "description": "A collection of media files",
          "items": {
            "$ref": "#/definitions/ProductMediaFileLinkModel"
          },
          "type": "array"
        },
        "metaData": {
          "description": "A collection of meta data",
          "items": {
            "$ref": "#/definitions/ProductMetaDataModelUpdatable"
          },
          "type": "array"
        },
        "modifiedAt": {
          "description": "A timestamp of when the product was modified. The time should be formatted using ISO-8601",
          "example": "2018-08-29T11:42:23+02:00",
          "readOnly": true,
          "type": "string"
        },
        "moreInfoUrl": {
          "description": "A valid URL to a web page with more information for this product",
          "maxLength": 255,
          "type": "string"
        },
        "productId": {
          "example": 101,
          "readOnly": true,
          "type": "integer"
        },
        "sortIndex": {
          "description": "Sort index for this product in a list",
          "maximum": 10000,
          "minimum": 1,
          "nullable": true,
          "type": "integer"
        },
        "unitId": {
          "description": "The id of the unit to use for this product if not standard. Fetch and handle available units using the /product-units endpoint",
          "nullable": true,
          "type": "integer"
        },
        "variants": {
          "description": "A collection of variants",
          "items": {
            "$ref": "#/definitions/ProductVariantModel"
          },
          "type": "array"
        },
        "vatRates": {
          "description": "A collection of country specific vat rates",
          "items": {
            "$ref": "#/definitions/ProductVatRateModel"
          },
          "type": "array"
        },
        "visibility": {
          "default": "hidden",
          "description": "The visibility of this product. Supported values are: hidden, visible, pricelists",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductStockStatusLanguageModel": {
      "properties": {
        "langCode": {
          "description": "Language Code (ISO 639-1) for this translation. Has to be a valid lang code that the shop supports. ",
          "example": "sv",
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "The name of this stock status",
          "example": "My stock status",
          "maxLength": 40,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductStockStatusModel": {
      "properties": {
        "idCode": {
          "description": "The idCode of the status. Only standard statuses has idCodes set. It is also not permitted to change names for standard statuses",
          "example": "inStock",
          "maxLength": 20,
          "readOnly": true,
          "type": "string"
        },
        "inStock": {
          "default": false,
          "description": "Should the product be displayed as \"in stock\" when this status is set?",
          "example": false,
          "type": "boolean"
        },
        "languages": {
          "items": {
            "$ref": "#/definitions/ProductStockStatusLanguageModel"
          },
          "type": "array"
        },
        "productBuyable": {
          "default": true,
          "description": "Is the product buyable when this status is set?",
          "example": true,
          "type": "boolean"
        },
        "sortIndex": {
          "description": "Sort index for this status",
          "type": "integer"
        },
        "stockStatusId": {
          "description": "The stock status id",
          "example": 101,
          "readOnly": true,
          "type": "integer"
        },
        "stockoutNewStatusId": {
          "description": "This has to be set to another, existing stock status id, or null. If a product has its quantity changed to negative, the product will then change stock status to the one with this id",
          "nullable": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProductStockStatusModelCollection": {
      "properties": {
        "data": {
          "description": "A list of product stock statuses",
          "items": {
            "$ref": "#/definitions/ProductStockStatusModel"
          },
          "type": "array"
        }
      }
    },
    "ProductStockStatusModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductStockStatusModel"
        }
      }
    },
    "ProductUnitLanguageModel": {
      "properties": {
        "langCode": {
          "description": "The language code for this language",
          "example": "sv",
          "type": "string"
        },
        "name": {
          "description": "The name of this unit type",
          "example": "Pieces",
          "maxLength": 30,
          "type": "string"
        },
        "symbol": {
          "description": "The symbol to use when counting this unit. For example ”pcs.”",
          "example": "pcs.",
          "maxLength": 5,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductUnitLanguageModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of product unit languages",
          "items": {
            "$ref": "#/definitions/ProductUnitLanguageModel"
          },
          "type": "array"
        }
      }
    },
    "ProductUnitModel": {
      "properties": {
        "languages": {
          "$ref": "#/definitions/ProductUnitLanguageModelCollection"
        },
        "unitId": {
          "description": "The units id",
          "example": 1,
          "format": "int32",
          "minimum": 1,
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProductUnitModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of product units",
          "items": {
            "$ref": "#/definitions/ProductUnitModel"
          },
          "type": "array"
        }
      }
    },
    "ProductUnitModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductUnitModel"
        }
      }
    },
    "ProductVariantAttributeLanguageModel": {
      "properties": {
        "langCode": {
          "description": "The langCode for this language. Supported language codes are: sv, en, no, da, fi, de, fr, es",
          "type": "string"
        },
        "name": {
          "description": "The name of this attribute",
          "maxLength": 50,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductVariantAttributeModel": {
      "properties": {
        "attributeId": {
          "description": "The id for this attribute",
          "type": "integer"
        },
        "languages": {
          "description": "A collection of attribute languages",
          "properties": {
            "data": {
              "items": {
                "$ref": "#/definitions/ProductVariantAttributeLanguageModel"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "ProductVariantAttributeModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of attribute values",
          "items": {
            "$ref": "#/definitions/ProductVariantAttributeModel"
          },
          "type": "array"
        }
      }
    },
    "ProductVariantAttributeModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductVariantAttributeModel"
        }
      }
    },
    "ProductVariantAttributeModelUpdatable": {
      "properties": {
        "attributeId": {
          "example": 1,
          "readOnly": true,
          "type": "integer"
        },
        "languages": {
          "description": "A collection of attribute languages",
          "items": {
            "$ref": "#/definitions/ProductVariantAttributeLanguageModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProductVariantAttributeValueLanguageModel": {
      "properties": {
        "langCode": {
          "description": "The langCode for this language. Supported language codes are: sv, en, no, da, fi, de, fr, es",
          "type": "string"
        },
        "name": {
          "description": "The name of this attribute value",
          "maxLength": 50,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductVariantAttributeValueModel": {
      "properties": {
        "attribute": {
          "$ref": "#/definitions/ProductVariantAttributeModel"
        },
        "attributeValueId": {
          "description": "The id for this attribute value",
          "type": "integer"
        },
        "languages": {
          "description": "A collection of attribute value languages",
          "items": {
            "$ref": "#/definitions/ProductVariantAttributeValueLanguageModel"
          },
          "type": "array"
        },
        "skuSuffix": {
          "description": "The suggested suffix for new Variants using this attribute value",
          "example": "W",
          "type": "string"
        },
        "sortIndex": {
          "default": 0,
          "description": "The sort order for this attribute value",
          "example": 9,
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProductVariantAttributeValueModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of attribute values",
          "items": {
            "$ref": "#/definitions/ProductVariantAttributeValueModel"
          },
          "type": "array"
        }
      }
    },
    "ProductVariantAttributeValueModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductVariantAttributeValueModel"
        }
      }
    },
    "ProductVariantAttributeValueModelUpdatable": {
      "properties": {
        "languages": {
          "description": "A collection of attribute value languages",
          "items": {
            "$ref": "#/definitions/ProductVariantAttributeValueLanguageModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProductVariantModel": {
      "properties": {
        "attributeValueLinks": {
          "description": "An array of attribute value IDs that this variant belongs to. This field is mandatory for products variants if the product´s hasSeveralVariants field is set to true",
          "items": {
            "description": "The ID of the attribute value",
            "minimum": 1,
            "type": "integer"
          },
          "type": "array"
        },
        "attributes": {
          "description": "A collection of product variant attribute values",
          "items": {
            "$ref": "#/definitions/ProductVariantAttributeValueModel"
          },
          "type": "array"
        },
        "costPrice": {
          "description": "The cost for this variant. Used for statistic and never displayed to customers",
          "minimum": 0,
          "nullable": true,
          "type": "string"
        },
        "ean": {
          "description": "European article no",
          "maxLength": 20,
          "type": "string"
        },
        "imageFileId": {
          "description": "The ID of this variant main image. Available media files can be fetched using the /media-files endpoint",
          "nullable": true,
          "type": "integer"
        },
        "isActive": {
          "default": true,
          "description": "Is this variant active? Only active variants are visible to customers",
          "type": "boolean"
        },
        "mpn": {
          "description": "Manufacturer part no",
          "maxLength": 40,
          "type": "string"
        },
        "prices": {
          "description": "A collection of product variant prices",
          "items": {
            "$ref": "#/definitions/ProductVariantPriceModel"
          },
          "type": "array"
        },
        "sku": {
          "description": "The product variants SKU (stock keeping unit)",
          "maxLength": 40,
          "type": "string"
        },
        "stockQuantity": {
          "description": "The current stock quantity for this variant",
          "maximum": 100000000,
          "minimum": -100000000,
          "nullable": true,
          "type": "integer"
        },
        "stockStatusId": {
          "description": "The ID of the variants stock status. Available stock statuses can be fetched using the /product-stock-statuses endpoint",
          "nullable": true,
          "type": "integer"
        },
        "weightInKg": {
          "description": "The variants weight in KG",
          "example": 0.15,
          "format": "float",
          "minimum": 0,
          "nullable": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "ProductVariantModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of product variants",
          "items": {
            "$ref": "#/definitions/ProductVariantModel"
          },
          "type": "array"
        }
      }
    },
    "ProductVariantModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductVariantModel"
        }
      }
    },
    "ProductVariantPriceModel": {
      "properties": {
        "priceExVat": {
          "default": 0,
          "description": "The price excluding vat",
          "example": 15.2,
          "format": "float",
          "minimum": 0,
          "type": "number"
        },
        "pricelistId": {
          "description": "The pricelist this price is for",
          "type": "integer"
        },
        "specialPriceExVat": {
          "description": "The special price excluding vat (a discounted price)",
          "example": 13.6,
          "format": "float",
          "minimum": 0,
          "nullable": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "ProductVariantPriceModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of product variants",
          "items": {
            "$ref": "#/definitions/ProductVariantPriceModel"
          },
          "type": "array"
        }
      }
    },
    "ProductVariantPriceModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductVariantPriceModel"
        }
      }
    },
    "ProductVatRateModel": {
      "properties": {
        "countryCode": {
          "description": "The country code this vat rate should be valid for. The country code should be set using ISO 3166-1 alpha-2",
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "vatRate": {
          "default": 0,
          "description": "The vat rate to use for this country and product",
          "example": 25,
          "format": "float",
          "maximum": 100,
          "minimum": 0,
          "type": "number"
        }
      },
      "type": "object"
    },
    "ProductVatRateModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of product vat rates",
          "items": {
            "$ref": "#/definitions/ProductVatRateModel"
          },
          "type": "array"
        }
      }
    },
    "ProductVatRateModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductVatRateModel"
        }
      }
    },
    "ProductsAttributesModelItem": {
      "properties": {
        "attributeId": {
          "description": "The id for this attribute",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ShippingMethodLanguageModel": {
      "properties": {
        "langCode": {
          "description": "Language code",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Name of shipping method",
          "readOnly": true,
          "type": "string"
        },
        "shortDescription": {
          "description": "A shorter informative description",
          "readOnly": true,
          "type": "string"
        },
        "title": {
          "description": "Title of shipping method",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ShippingMethodLanguageModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of shipping method languages",
          "items": {
            "$ref": "#/definitions/ShippingMethodLanguageModel"
          },
          "type": "array"
        }
      }
    },
    "ShippingMethodModel": {
      "properties": {
        "active": {
          "description": "If the shipping method is actively available on checkout or not",
          "readOnly": true,
          "type": "boolean"
        },
        "freeShippingMinItemsSubtotal": {
          "description": "Offer free shipping with this method if the minimum order sub total amount is at least this value",
          "format": "float",
          "minimum": 0,
          "nullable": true,
          "readOnly": true,
          "type": "number"
        },
        "freeShippingMinWeight": {
          "description": "Offer free shipping with this method if the minimum order total weight is at least this value",
          "format": "float",
          "minimum": 0,
          "nullable": true,
          "readOnly": true,
          "type": "number"
        },
        "isClickAndCollect": {
          "description": "Tells whether this method is a \"click and collect\" or not",
          "example": false,
          "nullable": false,
          "readOnly": true,
          "type": "boolean"
        },
        "languages": {
          "$ref": "#/definitions/ShippingMethodLanguageModelCollection"
        },
        "shippingMethodId": {
          "description": "The shipping methods Id",
          "example": 1,
          "readOnly": true,
          "type": "integer"
        },
        "validCountriesSelected": {
          "description": "The countries this method is valid for (if validForCountries is set to ”selected”)",
          "items": {
            "description": "Country code",
            "example": "SE",
            "maxLength": 2,
            "minLength": 2,
            "readOnly": true,
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "validForCountries": {
          "description": "The restrictions to countries this shipping method is valid for. Valid values are: all, EU, non-EU, selected, none",
          "enum": [
            "all",
            "EU",
            "non-EU",
            "selected",
            "none"
          ],
          "example": "all",
          "readOnly": true,
          "type": "string"
        },
        "validForCustomerType": {
          "description": "The customer type this method is valid for. Valid values are: null (no restriction), person, company",
          "nullable": true,
          "readOnly": true,
          "type": "string"
        },
        "validForMaxItemsSubtotal": {
          "description": "The max order sub total that this method is valid for",
          "format": "float",
          "minimum": 0,
          "nullable": true,
          "readOnly": true,
          "type": "number"
        },
        "validForMaxWeight": {
          "description": "The max order weight that this method is valid for.",
          "format": "float",
          "minimum": 0,
          "nullable": true,
          "readOnly": true,
          "type": "number"
        },
        "validForMinItemsSubtotal": {
          "description": "The min order sub total that this method is valid for",
          "format": "float",
          "minimum": 0,
          "nullable": true,
          "readOnly": true,
          "type": "number"
        },
        "validForMinWeight": {
          "description": "The min order weight that this method is valid for",
          "format": "float",
          "minimum": 0,
          "nullable": true,
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "ShippingMethodModelCollection": {
      "properties": {
        "data": {
          "description": "A collection of shipping methods",
          "items": {
            "$ref": "#/definitions/ShippingMethodModel"
          },
          "type": "array"
        }
      }
    },
    "ShippingMethodModelItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ShippingMethodModel"
        }
      }
    },
    "ShippingTrackingTypeModel": {
      "properties": {
        "name": {
          "description": "The shipping tracking type name",
          "example": "Posten Sverige",
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "The shipping tracking type ID",
          "example": 1,
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ShippingTrackingTypeModelCollection": {
      "properties": {
        "data": {
          "description": "A list of shipping tracking types",
          "items": {
            "$ref": "#/definitions/ShippingTrackingTypeModel"
          },
          "type": "array"
        }
      }
    },
    "ShopItem": {
      "properties": {
        "data": {
          "$ref": "#/definitions/ShopModel"
        }
      }
    },
    "ShopModel": {
      "properties": {
        "activeLangCodes": {
          "description": "Active languages in shop",
          "items": {
            "description": "Lang code",
            "example": "sv",
            "maxLength": 2,
            "minLength": 2,
            "readOnly": true,
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "baseCurrency": {
          "description": "The shops base currency. All currencies and related data can be fetched using the /currencies endpoint",
          "example": "SEK",
          "readOnly": true,
          "type": "string"
        },
        "defaultCustomerCountryCode": {
          "description": "The default customer country",
          "example": "SE",
          "readOnly": true,
          "type": "string"
        },
        "defaultLangCode": {
          "description": "Shops default language code",
          "example": "sv",
          "readOnly": true,
          "type": "string"
        },
        "generalDefaultVatRate": {
          "description": "The default vat rate for new products",
          "example": 25,
          "format": "float",
          "minimum": 0,
          "readOnly": true,
          "type": "number"
        },
        "idCode": {
          "description": "A unique id code for this shop",
          "example": "myShop",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "The shop name",
          "example": "My web shop",
          "readOnly": true,
          "type": "string"
        },
        "shopAddress": {
          "description": "The address to the web shop",
          "example": "My Street 1",
          "readOnly": true,
          "type": "string"
        },
        "shopCity": {
          "description": "The city to the web shop",
          "example": "My Town",
          "readOnly": true,
          "type": "string"
        },
        "shopCompanyName": {
          "description": "The company running this web shop",
          "example": "My Company Ltd.",
          "readOnly": true,
          "type": "string"
        },
        "shopCountryCode": {
          "description": "The country the company behind the web shop resides in",
          "example": "SE",
          "readOnly": true,
          "type": "string"
        },
        "shopOrgNo": {
          "description": "The business id of the company running the web shop",
          "example": "556677-0000",
          "readOnly": true,
          "type": "string"
        },
        "shopPhoneNo": {
          "description": "The contact phone number to the web shop",
          "example": "040 - 60 20 900",
          "readOnly": true,
          "type": "string"
        },
        "shopPostalCode": {
          "description": "The postal code to the web shop",
          "example": "100 00",
          "readOnly": true,
          "type": "string"
        },
        "shopVatNo": {
          "description": "The EU VAT number of the company running the web shop",
          "example": "SE556677000001",
          "readOnly": true,
          "type": "string"
        },
        "status": {
          "description": "The current status of this shop. Possible values are: open, closed, inactive",
          "example": "open",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "TokenModel": {
      "properties": {
        "access_token": {
          "description": "The Access Token to use in future requests",
          "example": "2YotnFZFEjr1zCsicMWpAA",
          "readOnly": true,
          "type": "string"
        },
        "expires_in": {
          "description": "The number of seconds until this access token expires",
          "example": 3600,
          "readOnly": true,
          "type": "integer"
        },
        "scope": {
          "description": "The scope this access token is valid for",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "description": "OAuth 2.0 using Client Credentials",
      "flow": "application",
      "scopes": {},
      "tokenUrl": "http://dev-shop.sws.local/api/v2/token",
      "type": "oauth2"
    }
  },
  "security": [
    {
      "oauth2": []
    }
  ],
  "tags": [
    {
      "description": "",
      "name": "Authentication"
    },
    {
      "description": "",
      "name": "Currency"
    },
    {
      "description": "",
      "name": "Customer Addresses"
    },
    {
      "description": "",
      "name": "Customer External Services"
    },
    {
      "description": "",
      "name": "Customer Tags"
    },
    {
      "description": "",
      "name": "Customers"
    },
    {
      "description": "",
      "name": "Media Files"
    },
    {
      "description": "",
      "name": "Order Addresses"
    },
    {
      "description": "",
      "name": "Order Comments"
    },
    {
      "description": "",
      "name": "Order External Services"
    },
    {
      "description": "",
      "name": "Order Items"
    },
    {
      "description": "",
      "name": "Order Statuses"
    },
    {
      "description": "",
      "name": "Orders"
    },
    {
      "description": "",
      "name": "Payment Methods"
    },
    {
      "description": "",
      "name": "Pricelists"
    },
    {
      "description": "",
      "name": "Product Attributes"
    },
    {
      "description": "",
      "name": "Product Categories"
    },
    {
      "description": "",
      "name": "Product Category Links"
    },
    {
      "description": "",
      "name": "Product Languages"
    },
    {
      "description": "",
      "name": "Product Manufacturers"
    },
    {
      "description": "",
      "name": "Product Media File Links"
    },
    {
      "description": "",
      "name": "Product Meta Data"
    },
    {
      "description": "",
      "name": "Product Meta Data Types"
    },
    {
      "description": "",
      "name": "Product Stock Statuses"
    },
    {
      "description": "",
      "name": "Product Units"
    },
    {
      "description": "",
      "name": "Product Variant Attribute Values"
    },
    {
      "description": "",
      "name": "Product Variant Attributes"
    },
    {
      "description": "",
      "name": "Product Variant Pricelist Prices"
    },
    {
      "description": "",
      "name": "Product Variants"
    },
    {
      "description": "",
      "name": "Product Vat Rates"
    },
    {
      "description": "",
      "name": "Products"
    },
    {
      "description": "",
      "name": "Shipping Methods"
    },
    {
      "description": "",
      "name": "Shipping Tracking Types"
    },
    {
      "description": "",
      "name": "Shop"
    },
    {
      "description": "",
      "name": "Tags"
    }
  ],
  "x-components": {
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "schema": {
          "$ref": "#/definitions/ErrorModel"
        }
      },
      "ItemDeleted": {
        "description": "Entity deleted"
      },
      "NotFound": {
        "description": "Entity not found",
        "schema": {
          "$ref": "#/definitions/ErrorModel"
        }
      }
    }
  }
}
