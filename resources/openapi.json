{
  "openapi": "3.0.0",
  "info": {
    "title": "Starweb Shop API v.2",
    "description": "This API is only allowed to be used by partners of Starweb AB and further requires explicit permission from both Starweb AB and the shop owner. If you are interested in using it, please contact us at starwebapi@starweb.se",
    "contact": {
      "name": "Starweb API support",
      "url": "https://www.starweb.se/starweb-api",
      "email": "starwebapi@starweb.se"
    },
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "https://{shopId}.starwebserver.se/api/v2",
      "description": "Shop API",
      "variables": {
        "shopId": {
          "default": "",
          "description": "The shopId of the shop you want to connect to"
        }
      }
    }
  ],
  "paths": {
    "/token": {
      "summary": "Generate and fetch new access token",
      "post": {
        "operationId": "generateFetchAccessToken",
        "responses": {
          "200": {
            "description": "Access Token and related details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Client credentials",
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ClientCredentialModel"
              }
            }
          }
        }
      }
    },
    "/currencies": {
      "summary": "Get Currencies",
      "get": {
        "operationId": "getCurrencies",
        "responses": {
          "200": {
            "description": "An collection of currencies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyCollection"
                }
              }
            }
          }
        }
      }
    },
    "/currencies/{currencyCode}": {
      "summary": "Get a currency",
      "get": {
        "operationId": "getCurrency",
        "responses": {
          "200": {
            "description": "A currency",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "name": "currencyCode",
          "in": "path",
          "required": true,
          "description": "The currency code",
          "example": "sek",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/customer-tags": {
      "summary": "Get customer tags",
      "get": {
        "operationId": "getCustomerTags",
        "responses": {
          "200": {
            "description": "An collection of customer tags",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTagModelCollection"
                }
              }
            }
          }
        }
      }
    },
    "/customer-tags/{tagId}": {
      "summary": "Get a customer tag",
      "get": {
        "operationId": "getCustomerTag",
        "responses": {
          "200": {
            "description": "An customer tag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTagModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "name": "tagId",
          "in": "path",
          "required": true,
          "description": "The tag id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32"
          }
        }
      ]
    },
    "/customers": {
      "summary": "Get shop orders or create a new one",
      "get": {
        "operationId": "listCustomers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page of customers to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort the result using a specified field. customerId is default. Valid options are: customerId",
            "example": "customerId",
            "schema": {
              "type": "string",
              "enum": [
                "customerId"
              ]
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "ASC for an ascending sort order; or DESC for a descending sort order. DESC is default",
            "example": "DESC",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "createdSince",
            "in": "query",
            "description": "Use this to only fetch customers that has been created since a certain time. The time should be formatted using ISO-8601 (url encoded)",
            "example": "2018-06-17T13:46:54+02:00",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updatedSince",
            "in": "query",
            "description": "Use this to only fetch customers that has been modified since a certain time. The time should be formatted using ISO-8601 (url encoded)",
            "example": "2018-06-17T13:46:54+02:00",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeWithoutAccount",
            "in": "query",
            "description": "Use this to also include customers without an account",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "simple",
            "description": "If you want to include child data in the result. Example: ?include=tags (to include customer tags); ?include=tags,addresses (to include both customer tags and addresses). Available includes: tags, externalServices, addresses",
            "examples": [
              "?include=tags",
              "?include=addresses",
              "?include=externalServices",
              "?include=tags,externalServices"
            ],
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of customers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "operationId": "createCustomer",
        "responses": {
          "201": {
            "description": "The created customer is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Customer data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateModel"
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}": {
      "summary": "Get or manipulate a certain customer",
      "get": {
        "operationId": "getCustomer",
        "responses": {
          "200": {
            "description": "A customer is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "style": "simple",
            "description": "If you want to include child data in the result. Example: ?include=tags (to include customer tags); ?include=tags,addresses (to include both customer tags and addresses). Available includes: tags, externalServices, addresses",
            "examples": [
              "?include=tags",
              "?include=addresses",
              "?include=externalServices",
              "?include=tags,externalServices"
            ],
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "operationId": "deleteCustomer",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putCustomer",
        "responses": {
          "200": {
            "description": "The updated customer is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Customer data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchCustomer",
        "responses": {
          "200": {
            "description": "The updated customer is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Customer data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "The customers id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        }
      ]
    },
    "/customers/{customerId}/external-services": {
      "summary": "Get customer external services. At this time you cannot create or update a customer external service.",
      "get": {
        "operationId": "getCustomerExternalServices",
        "responses": {
          "200": {
            "description": "An array of external services",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerExternalServicesModelCollection"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "The orders id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        }
      ]
    },
    "/customers/{customerId}/external-services/{serviceName}": {
      "summary": "Get or manipulate a certain customer external service",
      "get": {
        "operationId": "getCustomerExternalService",
        "responses": {
          "200": {
            "description": "An external service is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerExternalServicesModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "The orders id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        },
        {
          "name": "serviceName",
          "in": "path",
          "required": true,
          "description": "The service name",
          "schema": {
            "type": "string",
            "example": "Fortnox"
          }
        }
      ]
    },
    "/customers/{customerId}/tags": {
      "summary": "Get customer tags or add an existing tag to a customer",
      "get": {
        "operationId": "getCustomerTags",
        "responses": {
          "200": {
            "description": "An array of customer tags",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddedTagModelCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "addTagToCustomer",
        "responses": {
          "201": {
            "description": "The created customer tag is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddedTagModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Customer tag data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAddedTagModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "The customers id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        }
      ]
    },
    "/customers/{customerId}/tags/{tagId}": {
      "summary": "Get or replace a customers tag",
      "get": {
        "operationId": "getCustomerTag",
        "responses": {
          "200": {
            "description": "An customer tag is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddedTagModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "operationId": "removeTagFromCustomer",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putTagOnCustomer",
        "responses": {
          "200": {
            "description": "The updated customer tag is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddedTagModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Customer tag data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAddedTagModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchTagOnCustomerBy",
        "responses": {
          "200": {
            "description": "The updated customer tag is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddedTagModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Customer tag data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAddedTagModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "The customers id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        },
        {
          "name": "tagId",
          "in": "path",
          "required": true,
          "description": "The customer tag id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        }
      ]
    },
    "/customers/{customerId}/addresses": {
      "summary": "Get customer addresses",
      "get": {
        "operationId": "getCustomerGroups",
        "responses": {
          "200": {
            "description": "An object of customer addresses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressesModelCollection"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "The customers id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        }
      ]
    },
    "/customers/{customerId}/addresses/{addressType}": {
      "summary": "Get, delete or update a customers address",
      "get": {
        "operationId": "getCustomerAddress",
        "responses": {
          "200": {
            "description": "An customer address is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressesModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "operationId": "removeAddressFromCustomer",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putCustomerAddress",
        "responses": {
          "200": {
            "description": "The updated customer address is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressesModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Address data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchCustomerAddress",
        "responses": {
          "200": {
            "description": "The updated customer address is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressesModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Address data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "The customers id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        },
        {
          "name": "addressType",
          "in": "path",
          "required": true,
          "description": "The customer address type",
          "schema": {
            "type": "string",
            "example": "invoice",
            "enum": [
              "delivery",
              "invoice"
            ]
          }
        }
      ]
    },
    "/media-files": {
      "summary": "Create and fetch media files",
      "get": {
        "operationId": "getMediaFiles",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page of media files to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection of media files",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaFileModelCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createMediaFile",
        "responses": {
          "201": {
            "description": "The created media file is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaFileModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "The media file to upload",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MediaFileUploadModel"
              }
            }
          }
        }
      }
    },
    "/media-files/{mediaFileId}": {
      "summary": "Get or manipulate a certain media file",
      "get": {
        "operationId": "getMediaFile",
        "responses": {
          "200": {
            "description": "A media file is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaFileModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "operationId": "deleteMediaFile",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putMediaFile",
        "responses": {
          "200": {
            "description": "The updated media file is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaFileModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "The media file to upload",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MediaFileUploadModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchMediaFile",
        "responses": {
          "200": {
            "description": "The updated media file is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaFileModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "The media file to upload",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MediaFileUploadModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "mediaFileId",
          "in": "path",
          "required": true,
          "description": "The media files id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32"
          }
        }
      ]
    },
    "/orders": {
      "summary": "Get shop orders or create a new one",
      "get": {
        "operationId": "listOrders",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page of orders to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "format": "int32"
            }
          },
          {
            "name": "includeNonCompletePayments",
            "in": "query",
            "default": false,
            "description": "Set to true if you want to fetch orders that has not been completed yet. An order is ”completed” when the payment step has been completed successfully.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filterQuery",
            "in": "query",
            "description": "A filter query to filter the fetched orders by. Will search in fields such as: customer/company name, order items sku and description, etc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterPaymentMethodId",
            "in": "query",
            "description": "Only fetch orders with a certain payment method Id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filterShippingMethodId",
            "in": "query",
            "description": "Only fetch orders with a certain shipping method Id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ordersCreatedAfter",
            "in": "query",
            "description": "Only fetch orders created after this timestamp (The time should be formatted using ISO-8601 and url encoded)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordersCreatedBefore",
            "in": "query",
            "description": "Only fetch orders created before this timestamp (The time should be formatted using ISO-8601 and url encoded)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statusFilter",
            "in": "query",
            "description": "Only fetch orders with the specifiec order status. Use order status ID",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort the result using a specified field. orderId is default",
            "example": "orderId",
            "schema": {
              "type": "string",
              "enum": [
                "orderId",
                "createdAt",
                "modifiedAt",
                "customer",
                "paymentMethodName",
                "shippingMethodName",
                "totalAmount",
                "status",
                "read"
              ],
              "example": "orderId"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "ASC for an ascending sort order; or DESC for a descending sort order. DESC is default",
            "example": "DESC",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "example": "DESC"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "simple",
            "description": "If you want to include child data in the result. Example: ?include=items (to include order items) or ?include=items,externalServices (to include order items as well as external ids). Available includes: items, externalServices, status, customer, addresses",
            "examples": [
              "?include=items",
              "?include=items,externalServices"
            ],
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "operationId": "createOrder",
        "responses": {
          "201": {
            "description": "The created order is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Order data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderUpdateModel"
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}": {
      "summary": "Get or manipulate a certain shop order",
      "get": {
        "operationId": "getOrder",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "style": "simple",
            "description": "If you want to include child data in the result. Example: ?include=items (to include order items) or ?include=items,externalServices (to include order items as well as external ids). Available includes: items, externalServices, status, customer, addresses",
            "examples": [
              "?include=items",
              "?include=items,externalServices"
            ],
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An order is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "operationId": "deleteOrder",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putOrder",
        "responses": {
          "200": {
            "description": "The updated order is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Order data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderUpdateModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchOrder",
        "responses": {
          "200": {
            "description": "The updated order is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Order data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderUpdateModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "The orders id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32"
          }
        }
      ]
    },
    "/orders/{orderId}/addresses": {
      "summary": "Get an orders addresses",
      "get": {
        "operationId": "listOrderAddresses",
        "responses": {
          "200": {
            "description": "An array of order addresses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderAddressCollection"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "The orders id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        }
      ]
    },
    "/orders/{orderId}/addresses/{addressType}": {
      "summary": "Get or manipulate a certain order address",
      "get": {
        "operationId": "getOrderAddress",
        "responses": {
          "200": {
            "description": "An address is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "operationId": "deleteOrderAddress",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putOrderAddress",
        "responses": {
          "200": {
            "description": "The updated address is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Address data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchOrderAddress",
        "responses": {
          "200": {
            "description": "The updated address is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Address data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "The orders id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        },
        {
          "name": "addressType",
          "in": "path",
          "required": true,
          "description": "The order address type",
          "schema": {
            "type": "string",
            "example": "originalInvoice",
            "enum": [
              "paymentMethodDelivery",
              "paymentMethodInvoice",
              "originalDelivery",
              "originalInvoice",
              "customerDelivery",
              "customerInvoice"
            ]
          }
        }
      ]
    },
    "/orders/{orderId}/comments": {
      "summary": "Get order comments",
      "get": {
        "operationId": "getOrderComments",
        "responses": {
          "200": {
            "description": "A collection of order comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCommentModelCollection"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "The orders id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        }
      ]
    },
    "/orders/{orderId}/comments/{commentId}": {
      "summary": "Get a certain order comment",
      "get": {
        "operationId": "getOrderComment",
        "responses": {
          "200": {
            "description": "An order comment is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCommentModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "The orders id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        },
        {
          "name": "commentId",
          "in": "path",
          "required": true,
          "description": "The order comments id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        }
      ]
    },
    "/orders/{orderId}/external-services": {
      "summary": "Get or create order external services",
      "get": {
        "operationId": "getOrderExternalServices",
        "responses": {
          "200": {
            "description": "An array of external services",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderExternalServiceModelCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createOrderExternalService",
        "responses": {
          "201": {
            "description": "The created external service is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderExternalServicesModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Order external service data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderExternalServiceModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "The orders id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        }
      ]
    },
    "/orders/{orderId}/external-services/{serviceName}": {
      "summary": "Get or manipulate a certain order external service",
      "get": {
        "operationId": "getOrderExternalService",
        "responses": {
          "200": {
            "description": "An external service is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderExternalServicesModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "operationId": "deleteOrderExternalService",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putOrderExternalService",
        "responses": {
          "200": {
            "description": "The updated external service is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderExternalServicesModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Order external service data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderExternalServiceModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchOrderExternalService",
        "responses": {
          "200": {
            "description": "The updated external service is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderExternalServicesModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Order external service data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderExternalServiceModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "The orders id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        },
        {
          "name": "serviceName",
          "in": "path",
          "required": true,
          "description": "The service name",
          "schema": {
            "type": "string",
            "example": "Fortnox"
          }
        }
      ]
    },
    "/orders/{orderId}/items": {
      "summary": "Get or create order items",
      "get": {
        "operationId": "getOrderItems",
        "responses": {
          "200": {
            "description": "An array of order items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemModelCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createOrderItem",
        "responses": {
          "201": {
            "description": "The created order item is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Order item data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderItemModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "The orders id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        }
      ]
    },
    "/orders/{orderId}/items/{orderItemId}": {
      "summary": "Get or manipulate a certain order item",
      "get": {
        "operationId": "getOrderItem",
        "responses": {
          "200": {
            "description": "An order item is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "operationId": "deleteOrderItem",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putOrderItem",
        "responses": {
          "200": {
            "description": "The updated order item is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Order item data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderItemModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchOrderItem",
        "responses": {
          "200": {
            "description": "The updated order item is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Order item data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderItemModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "The orders id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        },
        {
          "name": "orderItemId",
          "in": "path",
          "required": true,
          "description": "The order item id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        }
      ]
    },
    "/order-statuses": {
      "summary": "Get or create order statuses",
      "get": {
        "operationId": "getOrderStatuses",
        "responses": {
          "200": {
            "description": "An array of order statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStatusModelCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createOrderStatus",
        "responses": {
          "201": {
            "description": "The created order status is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStatusModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Order status data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderStatusModel"
              }
            }
          }
        }
      }
    },
    "/order-statuses/{orderStatusId}": {
      "summary": "Get or manipulate a certain order status.",
      "get": {
        "operationId": "getOrderStatus",
        "responses": {
          "200": {
            "description": "An order status is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStatusModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "operationId": "deleteOrderStatus",
        "description": "NB! You are not allowed to delete order statuses that is in use by an order, or standard order statuses (all statuses with an idCode set)",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "403": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putOrderStatus",
        "description": "NB! You are not allowed to update standard order statuses (all statuses with an idCode set)",
        "responses": {
          "200": {
            "description": "The updated order status is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStatusModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Order status data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderStatusModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchOrderStatus",
        "description": "NB! You are not allowed to update standard order statuses (all statuses with an idCode set)",
        "responses": {
          "200": {
            "description": "The updated order status is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStatusModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Order status data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderStatusModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "orderStatusId",
          "in": "path",
          "required": true,
          "description": "The order status id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32"
          }
        }
      ]
    },
    "/payment-methods": {
      "summary": "Get payment methods",
      "get": {
        "operationId": "getPaymentMethods",
        "responses": {
          "200": {
            "description": "An collection of payment methods",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodModelCollection"
                }
              }
            }
          }
        }
      }
    },
    "/payment-methods/{paymentMethodId}": {
      "summary": "Get a payment method",
      "get": {
        "operationId": "getPaymentMethod",
        "responses": {
          "200": {
            "description": "A payment method",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "name": "paymentMethodId",
          "in": "path",
          "required": true,
          "description": "The payment method id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32"
          }
        }
      ]
    },
    "/pricelists": {
      "summary": "Get pricelists collection",
      "get": {
        "operationId": "getPricelists",
        "responses": {
          "200": {
            "description": "An collection of pricelists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricelistModelCollection"
                }
              }
            }
          }
        }
      }
    },
    "/pricelists/{pricelistId}": {
      "summary": "Get a pricelist",
      "get": {
        "operationId": "getPricelist",
        "responses": {
          "200": {
            "description": "A pricelist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricelistModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "name": "pricelistId",
          "in": "path",
          "required": true,
          "description": "The pricelist id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32"
          }
        }
      ]
    },
    "/product-attributes": {
      "summary": "Get a collection of a variants attributes",
      "get": {
        "operationId": "listProductsVariantsAttributeValues",
        "responses": {
          "200": {
            "description": "An array of attribute",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantAttributeModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "operationId": "createAttribute",
        "responses": {
          "201": {
            "description": "The created attribute is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantAttributeModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Attribute data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariantAttributeModelUpdatable"
              }
            }
          }
        }
      }
    },
    "/product-attributes/{attributeId}": {
      "summary": "Get a certain attribute",
      "get": {
        "operationId": "getProductsVariantsAttributeValue",
        "responses": {
          "200": {
            "description": "An attribute value is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantAttributeModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putAttribute",
        "responses": {
          "201": {
            "description": "The updated attribute is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantAttributeModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Attribute data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariantAttributeModelUpdatable"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchAttribute",
        "responses": {
          "201": {
            "description": "The updated attribute is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantAttributeModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Attribute data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariantAttributeModelUpdatable"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAttribute",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "name": "attributeId",
          "in": "path",
          "required": true,
          "description": "The attribute value id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        }
      ]
    },
    "/product-attributes/{attributeId}/values": {
      "summary": "Get a collection of a variants attribute values",
      "get": {
        "operationId": "listProductsVariantsAttributeValues",
        "responses": {
          "200": {
            "description": "An array of attribute values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantAttributeValueModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "style": "simple",
            "description": "If you want to include child data in the result. Example: ?include=attribute (to include the attribute the values belongs to). Available includes: attribute",
            "examples": [
              "?include=attribute"
            ],
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "operationId": "createProductsVariantsAttributeValues",
        "responses": {
          "200": {
            "description": "The created attribute value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantAttributeValueModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Attribute value data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariantAttributeValueModelUpdatable"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "attributeId",
          "in": "path",
          "required": true,
          "description": "The attribute id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        }
      ]
    },
    "/product-attributes/{attributeId}/values/{attributeValueId}": {
      "summary": "Get a certain attribute value",
      "get": {
        "operationId": "getProductsVariantsAttributeValue",
        "responses": {
          "200": {
            "description": "An attribute value is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantAttributeValueModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "style": "simple",
            "description": "If you want to include child data in the result. Example: ?include=attribute (to include the attribute the values belongs to). Available includes: attribute",
            "examples": [
              "?include=attribute"
            ],
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "operationId": "putProductsVariantsAttributeValues",
        "responses": {
          "200": {
            "description": "The updated attribute value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantAttributeValueModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Attribute value data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariantAttributeValueModelUpdatable"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchProductsVariantsAttributeValues",
        "responses": {
          "200": {
            "description": "The updated attribute value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantAttributeValueModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Attribute value data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariantAttributeValueModelUpdatable"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAttributeValue",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "name": "attributeId",
          "in": "path",
          "required": true,
          "description": "The attribute id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        },
        {
          "name": "attributeValueId",
          "in": "path",
          "required": true,
          "description": "The attribe value id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        }
      ]
    },
    "/product-categories": {
      "summary": "Get product categories or create a new one",
      "get": {
        "operationId": "listProductCategories",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page of categories to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "format": "int32"
            }
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "Use to fetch categories with a specific external id",
            "example": "123",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Use to fetch only categories with this parentId",
            "example": 5,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "filterVisible",
            "in": "query",
            "description": "Only fetch categories visible to visitors",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "simple",
            "description": "If you want to include child data in the result. Example: ?include=languages (to include language based data such as category names, description, etc). Available includes: languages",
            "examples": [
              "?include=languages"
            ],
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCategoryModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "operationId": "createProductCategory",
        "responses": {
          "201": {
            "description": "The created product category is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCategoryModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Product category data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCategoryModel"
              }
            }
          }
        }
      }
    },
    "/product-categories/{categoryId}": {
      "summary": "Get or manipulate a certain product category",
      "get": {
        "operationId": "getProductCategory",
        "responses": {
          "200": {
            "description": "A product category is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCategoryModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "style": "simple",
            "description": "If you want to include child data in the result. Example: ?include=languages (to include language based data such as category names, description, etc). Available includes: languages",
            "examples": [
              "?include=languages"
            ],
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "operationId": "deleteProductCategory",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putProductCategory",
        "responses": {
          "200": {
            "description": "The updated product category is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCategoryModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Product category data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCategoryModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchProductCategory",
        "responses": {
          "200": {
            "description": "The updated product category is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCategoryModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Product category data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCategoryModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "categoryId",
          "in": "path",
          "required": true,
          "description": "The product category id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        }
      ]
    },
    "/product-manufacturers": {
      "summary": "Get a product manufacturer",
      "get": {
        "operationId": "listProductManufacturers",
        "responses": {
          "200": {
            "description": "An array of product manufacturer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductManufacturerModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/product-manufacturers/{manufacturerId}": {
      "summary": "Get a certain product manufacturer",
      "get": {
        "operationId": "getProductManufacturer",
        "responses": {
          "200": {
            "description": "A product manufacturer is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductManufacturerModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "name": "manufacturerId",
          "in": "path",
          "required": true,
          "description": "The manufacturers id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        }
      ]
    },
    "/product-units": {
      "summary": "Get a product unit",
      "get": {
        "operationId": "listProductUnits",
        "responses": {
          "200": {
            "description": "An array of product units",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductUnitModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/product-units/{unitId}": {
      "summary": "Get a certain product unit",
      "get": {
        "operationId": "getProductUnit",
        "responses": {
          "200": {
            "description": "A product unit is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductUnitModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "name": "unitId",
          "in": "path",
          "required": true,
          "description": "The units id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        }
      ]
    },
    "/product-meta-data-types": {
      "summary": "Get a product meta data type",
      "get": {
        "operationId": "listProductMetaDataTypes",
        "responses": {
          "200": {
            "description": "An array of product meta data types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetaDataTypeModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/product-meta-data-types/{metaDataTypeId}": {
      "summary": "Get a certain product meta data type",
      "get": {
        "operationId": "getProductMetaDataType",
        "responses": {
          "200": {
            "description": "A product meta data type is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetaDataTypeModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "name": "metaDataTypeId",
          "in": "path",
          "required": true,
          "description": "The meta data types id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        }
      ]
    },
    "/product-stock-statuses": {
      "summary": "Get product stock status or create a new one",
      "get": {
        "operationId": "listProductStockStatses",
        "responses": {
          "200": {
            "description": "An array of stock statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStockStatusModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "operationId": "createProductStockStatus",
        "responses": {
          "201": {
            "description": "The created product stock status is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStockStatusModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Product stock status data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductStockStatusModel"
              }
            }
          }
        }
      }
    },
    "/product-stock-statuses/{stockStatusId}": {
      "summary": "Get or manipulate a certain product stock status",
      "get": {
        "operationId": "getProductStockStatus",
        "responses": {
          "200": {
            "description": "A product stock status is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStockStatusModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "operationId": "deleteProductStockStatus",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putProductStockStatus",
        "responses": {
          "200": {
            "description": "The updated product stock status is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStockStatusModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Product stock status data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductStockStatusModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchProductStockStatus",
        "responses": {
          "200": {
            "description": "The updated product stock status is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStockStatusModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Product stock status data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductStockStatusModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "stockStatusId",
          "in": "path",
          "required": true,
          "description": "The stock status id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        }
      ]
    },
    "/products": {
      "summary": "Get products or create a new one",
      "get": {
        "operationId": "listProducts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page of products to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "format": "int32"
            }
          },
          {
            "name": "createdSince",
            "in": "query",
            "description": "Use this to only fetch products that has been created since a certain time. The time should be formatted using ISO-8601 (url encoded)",
            "example": "2018-06-17T13:46:54+02:00",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updatedSince",
            "in": "query",
            "description": "Use this to only fetch products that has been modified since a certain time. The time should be formatted using ISO-8601 (url encoded)",
            "example": "2018-06-17T13:46:54+02:00",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "simple",
            "description": "If you want to include child data in the result. Example: ?include=primaryVariant (to include primary product variant);?include=primaryVariant,languages (to include both primary product variant and languages). Available includes: primaryVariant, primaryVariant.prices, primaryVariant.attributes, attributes, mediaFiles, languages, vatRates, categories, unit, metaData. NOTE! Only one variant is included in result for performance reason. To fetch all variants, instead use /products/x/variants(unnecessary if hasSeveralVariants is false)",
            "examples": [
              "?include=primaryVariant",
              "?include=languages",
              "?include=primaryVariant.prices",
              "?include=primaryVariant.prices,mediaFiles",
              "?include=attributes"
            ],
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of products",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "operationId": "createProduct",
        "responses": {
          "201": {
            "description": "The created product is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Product data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductModelUpdatable"
              }
            }
          }
        }
      }
    },
    "/products/{productId}": {
      "summary": "Get or manipulate a certain product",
      "get": {
        "operationId": "getProduct",
        "responses": {
          "200": {
            "description": "A product is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "style": "simple",
            "description": "If you want to include child data in the result. Example: ?include=variants (to include product variants); ?include=variants,languages (to include both product variants and languages). Available includes: primaryVariant, primaryVariant.prices, mediaFiles, languages, vatRates, categories, unit, metaData. NOTE! Only one variant is included in result for performance reason. To fetch all variants, instead use /products/x/variants (unnecessary if hasSeveralVariants is false)",
            "examples": [
              "?include=primaryVariant",
              "?include=languages",
              "?include=primaryVariant.prices",
              "?include=primaryVariant.prices,mediaFiles"
            ],
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "operationId": "deleteProduct",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putProduct",
        "responses": {
          "200": {
            "description": "The updated product is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Product data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductModelUpdatable"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchProduct",
        "responses": {
          "200": {
            "description": "The updated product is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Product data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductModelUpdatable"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The product id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        }
      ]
    },
    "/products/{productId}/variants": {
      "summary": "Get a products variants or create a new variant",
      "get": {
        "operationId": "listProductsVariants",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page of customers to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "format": "int32"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "simple",
            "description": "If you want to include child data in the result. Example: ?include=prices (to include variants prices). Available includes: prices, attributes, attributes.attribute",
            "examples": [
              "?include=prices",
              "?include=attributeValues",
              "?include=attributeValues.attribute"
            ],
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of product variants",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "operationId": "createProductVariant",
        "responses": {
          "201": {
            "description": "The created products variant is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Product variant data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariantModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The products id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        }
      ]
    },
    "/products/{productId}/variants/{variantId}": {
      "summary": "Get or manipulate a certain product variant",
      "get": {
        "operationId": "getProductsVariant",
        "responses": {
          "200": {
            "description": "A products variant is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "style": "simple",
            "description": "If you want to include child data in the result. Example: ?include=prices (to include variants prices). Available includes: prices,  attributes, attributes.attribute",
            "examples": [
              "?include=prices",
              "?include=attributeValues",
              "?include=attributeValues.attribute"
            ],
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "operationId": "deleteProductsVariant",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putProductsVariant",
        "responses": {
          "200": {
            "description": "The updated products variant is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Products variant data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariantModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchProductsVariant",
        "responses": {
          "200": {
            "description": "The updated products variant is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Products variant data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariantModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The product id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        },
        {
          "name": "variantId",
          "in": "path",
          "required": true,
          "description": "The products variants id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        }
      ]
    },
    "/products/{productId}/vat-rates": {
      "summary": "Get a products country specific vat rates or create a new one",
      "get": {
        "operationId": "listProductsVatRates",
        "responses": {
          "200": {
            "description": "An array of product vat rates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVatRateModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "operationId": "createProductVatRate",
        "responses": {
          "201": {
            "description": "The created products vat rate is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVatRateModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Product vat rate data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVatRateModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The products id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        }
      ]
    },
    "/products/{productId}/vat-rates/{countryCode}": {
      "summary": "Get or manipulate a certain country specific product vat rate",
      "get": {
        "operationId": "getProductsVatRate",
        "responses": {
          "200": {
            "description": "A products vat rate is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVatRateModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "operationId": "deleteProductsVatRate",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putProductsVatRate",
        "responses": {
          "200": {
            "description": "The updated products vat rate is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVatRateModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Products vat rate data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVatRateModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchProductsVatRate",
        "responses": {
          "200": {
            "description": "The updated products vat rate is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVatRateModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Products vat rate data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVatRateModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The product id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        },
        {
          "name": "countryCode",
          "in": "path",
          "required": true,
          "description": "The country code for the vat rate to fetch/manipulate",
          "schema": {
            "type": "string",
            "example": "se"
          }
        }
      ]
    },
    "/products/{productId}/media-files": {
      "summary": "Get a products media file links or create a new media file link",
      "get": {
        "operationId": "listProductsMediaFileLinks",
        "responses": {
          "200": {
            "description": "An array of product media file links",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMediaFileLinkModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "operationId": "createProductsMediaFileLink",
        "responses": {
          "201": {
            "description": "The created products media file link is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMediaFileLinkModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Product media file link data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductMediaFileLinkModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The products id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        }
      ]
    },
    "/products/{productId}/media-files/{mediaFileId}": {
      "summary": "Get or manipulate a certain products media file link",
      "get": {
        "operationId": "getProductsMediaFileLink",
        "responses": {
          "200": {
            "description": "A products media file link is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMediaFileLinkModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "operationId": "deleteProductsMediaFileLink",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putProductsMediaFileLink",
        "responses": {
          "200": {
            "description": "The updated products media file link is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMediaFileLinkModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Product media file link data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductMediaFileLinkModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchProductsMediaFileLink",
        "responses": {
          "200": {
            "description": "The updated products media file link is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMediaFileLinkModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Product media file link data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductMediaFileLinkModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The product id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        },
        {
          "name": "mediaFileId",
          "in": "path",
          "required": true,
          "description": "The media file id of the link you want to fetch/change",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 3
          }
        }
      ]
    },
    "/products/{productId}/languages": {
      "summary": "Get a products languages or create a new language",
      "get": {
        "operationId": "listProductsLanguages",
        "responses": {
          "200": {
            "description": "An array of product languages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductLanguageModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "operationId": "createProductsLanguage",
        "responses": {
          "201": {
            "description": "The created products language is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductLanguageModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Product language data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductLanguageModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The products id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        }
      ]
    },
    "/products/{productId}/languages/{langCode}": {
      "summary": "Get or manipulate a certain products language",
      "get": {
        "operationId": "getProductsLanguage",
        "responses": {
          "200": {
            "description": "A products language is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductLanguageModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "operationId": "deleteProductsLanguage",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putProductsLanguage",
        "responses": {
          "200": {
            "description": "The updated products language is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductLanguageModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Product language data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductLanguageModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchProductsLanguage",
        "responses": {
          "200": {
            "description": "The updated products language is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductLanguageModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Product language data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductLanguageModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The product id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        },
        {
          "name": "langCode",
          "in": "path",
          "required": true,
          "description": "The language code you want to fetch/change. Supported language codes are: sv, en, no, da, fi, de, fr, es",
          "schema": {
            "type": "string",
            "example": "sv"
          }
        }
      ]
    },
    "/products/{productId}/categories": {
      "summary": "Get a products category link or create a new link",
      "get": {
        "operationId": "listProductsCategoryLinks",
        "responses": {
          "200": {
            "description": "An array of product category links",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCategoryLinkModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "operationId": "createProductsCategoryLink",
        "responses": {
          "201": {
            "description": "The created products category link is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCategoryLinkModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Product category link data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCategoryLinkModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The products id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        }
      ]
    },
    "/products/{productId}/categories/{categoryId}": {
      "summary": "Get or manipulate a certain products category link",
      "get": {
        "operationId": "getProductsCategoryLink",
        "responses": {
          "200": {
            "description": "A products category link is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCategoryLinkModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "operationId": "deleteProductsCategoryLink",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putProductsCategoryLink",
        "responses": {
          "200": {
            "description": "The updated products category link is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCategoryLinkModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Product category link data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCategoryLinkModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchProductsCategoryLink",
        "responses": {
          "200": {
            "description": "The updated products category link is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCategoryLinkModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Product category link data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCategoryLinkModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The product id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        },
        {
          "name": "categoryId",
          "in": "path",
          "required": true,
          "description": "The category id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        }
      ]
    },
    "/products/{productId}/meta-data": {
      "summary": "Get a products meta data or create a new one",
      "get": {
        "operationId": "listProductsMetaData",
        "responses": {
          "200": {
            "description": "An array of product meta data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetaDataModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "operationId": "createProductsMetaData",
        "responses": {
          "201": {
            "description": "The created products meta data is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetaDataModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Product meta data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductMetaDataModelUpdatable"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The products id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        }
      ]
    },
    "/products/{productId}/meta-data/{metaDataTypeId}": {
      "summary": "Get or manipulate a certain products meta data",
      "get": {
        "operationId": "getProductsMetaData",
        "responses": {
          "200": {
            "description": "A products meta data is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetaDataModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "operationId": "deleteProductsMetaData",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putProductsMetaData",
        "responses": {
          "200": {
            "description": "The updated products meta data is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetaDataModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Product meta data data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductMetaDataModelUpdatable"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchProductsMetaData",
        "responses": {
          "200": {
            "description": "The updated products meta data is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetaDataModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Product meta data data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductMetaDataModelUpdatable"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The product id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        },
        {
          "name": "metaDataTypeId",
          "in": "path",
          "required": true,
          "description": "The meta data type id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 9
          }
        }
      ]
    },
    "/products/{productId}/attributes": {
      "summary": "Get a products attributes",
      "get": {
        "operationId": "listProductsAttributes",
        "responses": {
          "200": {
            "description": "An array of the products attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantAttributeModelCollection"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The products id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        }
      ]
    },
    "/products/{productId}/attributes/{attributeId}": {
      "summary": "Get a certain attribute from a product",
      "get": {
        "operationId": "getProductsAttribute",
        "responses": {
          "200": {
            "description": "A products attribute is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantAttributeModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The product id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        },
        {
          "name": "attributeId",
          "in": "path",
          "required": true,
          "description": "The attribute id you want to fetch.",
          "schema": {
            "type": "int",
            "example": "1"
          }
        }
      ]
    },
    "/products/{productId}/variants/{variantId}/prices": {
      "summary": "Get a pricelist price or create a new",
      "get": {
        "operationId": "listProductsVariantsPricelistPrices",
        "responses": {
          "200": {
            "description": "An array of pricelist prices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantPriceModelCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "operationId": "createProductVariantPricelistPrice",
        "responses": {
          "201": {
            "description": "The created pricelist price is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantPriceModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "description": "Oricelist price data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariantPriceModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The products id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        },
        {
          "name": "variantId",
          "in": "path",
          "required": true,
          "description": "The products variants id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 101
          }
        }
      ]
    },
    "/products/{productId}/variants/{variantId}/prices/{pricelistId}": {
      "summary": "Get or manipulate a certain pricelist price",
      "get": {
        "operationId": "getProductsVariantsPricelistPrice",
        "responses": {
          "200": {
            "description": "A pricelist price is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantPriceModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "operationId": "deleteProductsVariantsPricelistPrice",
        "responses": {
          "204": {
            "$ref": "#/components/responses/ItemDeleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "operationId": "putProductsVariantsPricelistPrice",
        "responses": {
          "200": {
            "description": "The updated pricelist price is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantPriceModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Pricelist price data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariantPriceModel"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchProductsVariantsPricelistPrice",
        "responses": {
          "200": {
            "description": "The updated pricelist price is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantPriceModelItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Pricelist price data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariantPriceModel"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "The product id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        },
        {
          "name": "variantId",
          "in": "path",
          "required": true,
          "description": "The products variants id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        },
        {
          "name": "pricelistId",
          "in": "path",
          "required": true,
          "description": "The pricelist id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32",
            "example": 1
          }
        }
      ]
    },
    "/shipping-methods": {
      "summary": "Get shipping methods collection",
      "get": {
        "operationId": "getShippingMethods",
        "responses": {
          "200": {
            "description": "An collection of shipping methods",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethodModelCollection"
                }
              }
            }
          }
        }
      }
    },
    "/shipping-methods/{shippingMethodId}": {
      "summary": "Get a shipping method",
      "get": {
        "operationId": "getShippingMethod",
        "responses": {
          "200": {
            "description": "A shipping method",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethodModelItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "name": "shippingMethodId",
          "in": "path",
          "required": true,
          "description": "The shipping method id",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "format": "int32"
          }
        }
      ]
    },
    "/shipping-tracking-types": {
      "summary": "Get shipping tracking types",
      "get": {
        "operationId": "getShippingTrackingTypes",
        "responses": {
          "200": {
            "description": "An array of shipping tracking types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingTrackingTypeModelCollection"
                }
              }
            }
          }
        }
      }
    },
    "/shop": {
      "summary": "Get shop details",
      "get": {
        "operationId": "getShop",
        "responses": {
          "200": {
            "description": "A shop",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShopItem"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    }
  },
  "security": [
    {
      "oauth2": []
    }
  ],
  "components": {
    "schemas": {
      "ErrorModel": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "An error code for this type of error",
            "readOnly": true,
            "example": "error_code"
          },
          "error_description": {
            "type": "string",
            "description": "A human readable description of the error",
            "readOnly": true,
            "example": "Something went wrong"
          }
        }
      },
      "PaginationModel": {
        "type": "object",
        "properties": {
          "current_page": {
            "type": "integer",
            "description": "The current requested page",
            "readOnly": true,
            "example": 1
          },
          "per_page": {
            "type": "integer",
            "description": "Number of items per page",
            "readOnly": true,
            "example": 100
          },
          "total": {
            "type": "integer",
            "description": "The total number of items",
            "readOnly": true,
            "example": 24
          },
          "count": {
            "type": "integer",
            "description": "Number of items on this page",
            "readOnly": true,
            "example": 24
          }
        }
      },
      "OrderModel": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "description": "The orders ID",
            "readOnly": true,
            "example": 101
          },
          "modifiedAt": {
            "type": "string",
            "description": "A timestamp of when the order was modified. The time should be formatted using ISO-8601",
            "example": "2018-06-17T13:46:55+02:00",
            "readOnly": true
          },
          "baseCurrencyCode": {
            "type": "string",
            "description": "The shops base currency code at the point of order creation",
            "readOnly": true,
            "example": "SEK"
          },
          "shopCountryCode": {
            "type": "string",
            "description": "The shops country code at the point of order creation",
            "readOnly": true,
            "example": "SE"
          },
          "totalAmount": {
            "type": "number",
            "description": "The total order amount",
            "readOnly": true,
            "example": 622.4
          },
          "totalVat": {
            "type": "number",
            "description": "The total order VAT amount",
            "readOnly": true,
            "example": 155.6
          },
          "amountToPay": {
            "type": "number",
            "description": "The total order amount to pay",
            "readOnly": true,
            "example": 778
          },
          "totalAmountInBaseCurrency": {
            "type": "number",
            "description": "The total order amount, in the shops base currency",
            "readOnly": true,
            "example": 778
          },
          "totalVatInBaseCurrency": {
            "type": "number",
            "description": "The total VAT amount, in the shops base currency",
            "readOnly": true,
            "example": 115.6
          },
          "amountToPayInBaseCurrency": {
            "type": "number",
            "description": "The total amount to pay, in the shops base currency",
            "readOnly": true,
            "example": 778
          },
          "createdAt": {
            "type": "string",
            "description": "A timestamp of when the order was created. The time should be formatted using ISO-8601",
            "example": "2018-06-17T13:46:55+02:00"
          },
          "customerId": {
            "type": "integer",
            "description": "The ID of the orders customer",
            "example": 101
          },
          "statusId": {
            "type": "integer",
            "description": "The ID of the orders status",
            "example": 1
          },
          "onOrderStatusChangeSendEmail": {
            "type": "boolean",
            "description": "Set this to false to prevent sending email to customer on changes to statusId and new orders",
            "example": true,
            "writeOnly": true,
            "default": true
          },
          "onOrderStatusChangeProcessPayment": {
            "type": "boolean",
            "description": "Set this to false to prevent processing payment on changes to statusId. Only applies to payment methods that support processing payments. For example charging a reserved amount or cancel a created invoice",
            "writeOnly": true,
            "example": true,
            "default": true
          },
          "shippingMethodId": {
            "type": "integer",
            "description": "The ID of the orders shipping method",
            "example": 1
          },
          "paymentMethodId": {
            "type": "integer",
            "description": "The ID of the orders payment method",
            "example": 1
          },
          "paymentMethodIdCode": {
            "type": "string",
            "description": "The ID code of the payment method.",
            "readOnly": true,
            "example": "custom"
          },
          "paymentMethodName": {
            "type": "string",
            "description": "Title of the orders payment method",
            "maxLength": 30,
            "example": "Bankgiro"
          },
          "paymentFee": {
            "type": "number",
            "description": "Payment fee",
            "minimum": 0,
            "example": 23.2
          },
          "paymentVatRate": {
            "type": "number",
            "description": "The VAT rate of the paymentFee in percent",
            "example": 25
          },
          "shippingMethodName": {
            "type": "string",
            "description": "Title of the orders shipping method",
            "maxLength": 30,
            "example": "UPS International"
          },
          "shippingCost": {
            "type": "number",
            "description": "Shipping cost",
            "minimum": 0,
            "example": 23.2
          },
          "shippingVatRate": {
            "type": "number",
            "description": "The VAT rate of the shippingCost in percent",
            "example": 25
          },
          "totalWeight": {
            "type": "number",
            "description": "The total weight of the order in kg. This field is a calculated summary of all order items",
            "readOnly": true,
            "example": 0.9
          },
          "customInfo1": {
            "type": "string",
            "description": "Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection",
            "maxLength": 255
          },
          "customInfo2": {
            "type": "string",
            "description": "Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection",
            "maxLength": 255
          },
          "customInfo3": {
            "type": "string",
            "description": "Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection",
            "maxLength": 255
          },
          "customInfo4": {
            "type": "string",
            "description": "Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection",
            "maxLength": 255
          },
          "discountCode": {
            "type": "string",
            "description": "The code ID of a discount code that was used for this order",
            "maxLength": 20
          },
          "amountPaid": {
            "type": "number",
            "description": "The amount paid via the payment method for this order",
            "example": 778
          },
          "amountPaidInBaseCurrency": {
            "type": "number",
            "description": "Same as amountPaid, but in the shops base currency",
            "readOnly": true,
            "example": 778
          },
          "isComplete": {
            "type": "boolean",
            "description": "Is the order completed (that is, is it completely saved and has the payment method processed and confirmed it)",
            "example": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code of the currency that was used for this order. Has to be a valid ISO 4217 currency code",
            "required": true,
            "minLength": 3,
            "maxLength": 3,
            "example": "SEK"
          },
          "currencyExchangeRate": {
            "type": "number",
            "description": "The exchange rate between this orders currency and the shops base currency. Ff, for example, the shop base currency is SEK and this order was placed in NOK, where 1 SEK = 0.97 NOK - this value would be 0.97",
            "example": 0.97
          },
          "currencyPrecision": {
            "type": "integer",
            "description": "The number of decimals to display",
            "example": 2
          },
          "langCode": {
            "type": "string",
            "description": "Language Code (ISO 639-1) used for placing this order. Has to be a valid lang code that the shop has setup. Used for order update emails, etc. ",
            "minLength": 2,
            "maxLength": 2,
            "example": "sv"
          },
          "paymentReference": {
            "type": "string",
            "description": "Reference to the payment methods payment transaction",
            "maxLength": 80
          },
          "paymentStatus": {
            "type": "string",
            "description": "Status of the payment methods payment transaction",
            "maxLength": 20,
            "example": "reserved"
          },
          "isRead": {
            "type": "boolean",
            "description": "An order is read when an administrator has read it via the admin GUI"
          },
          "hasComment": {
            "type": "boolean",
            "description": "Whether the customer or an admin has added a comment to the order",
            "readOnly": true
          },
          "internalComment": {
            "type": "string",
            "description": "An internal comment placed by an administrator. Not available to the customer",
            "example": "Lorem ipsum..."
          },
          "shippingTrackerType": {
            "type": "integer",
            "description": "The ID of the tracking number type. Types are available via: GET /shipping-tracker-types",
            "example": 1
          },
          "shippingTrackingNo": {
            "type": "string",
            "description": "The shipping tracking number. Has to be in the format that is used for the chosen tracking type (please contact the freight forwarder regarding this).",
            "maxLength": 50
          },
          "originalCustomerEmail": {
            "type": "string",
            "description": "The email address of the customer at the point of order creation",
            "required": true,
            "example": "john.doe@example.net"
          },
          "originalCustomerNationalIdNo": {
            "type": "string",
            "description": "The national id number of the customer at the point of order creation"
          },
          "originalCustomerVatNo": {
            "type": "string",
            "description": "The VAT number of the customer at the point of order creation"
          },
          "originalCustomerCustomInfo1": {
            "type": "string",
            "description": "Custom customer info at the point of order creation"
          },
          "originalCustomerCustomInfo2": {
            "type": "string",
            "description": "Custom customer info at the point of order creation"
          },
          "items": {
            "$ref": "#/components/schemas/OrderItemModelCollection"
          },
          "addresses": {
            "$ref": "#/components/schemas/OrderAddressCollection"
          },
          "externalServices": {
            "$ref": "#/components/schemas/OrderExternalServiceModelCollection"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerModelItem"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatusModelItem"
          }
        }
      },
      "OrderUpdateModel": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "description": "The orders ID",
            "readOnly": true,
            "example": 101
          },
          "modifiedAt": {
            "type": "string",
            "description": "A timestamp of when the order was modified. The time should be formatted using ISO-8601",
            "example": "2018-06-17T13:46:55+02:00",
            "readOnly": true
          },
          "baseCurrencyCode": {
            "type": "string",
            "description": "The shops base currency code at the point of order creation",
            "readOnly": true,
            "example": "SEK"
          },
          "shopCountryCode": {
            "type": "string",
            "description": "The shops country code at the point of order creation",
            "readOnly": true,
            "example": "SE"
          },
          "totalAmount": {
            "type": "number",
            "description": "The total order amount",
            "readOnly": true,
            "example": 622.4
          },
          "totalVat": {
            "type": "number",
            "description": "The total order VAT amount",
            "readOnly": true,
            "example": 155.6
          },
          "amountToPay": {
            "type": "number",
            "description": "The total order amount to pay",
            "readOnly": true,
            "example": 778
          },
          "totalAmountInBaseCurrency": {
            "type": "number",
            "description": "The total order amount, in the shops base currency",
            "readOnly": true,
            "example": 778
          },
          "totalVatInBaseCurrency": {
            "type": "number",
            "description": "The total VAT amount, in the shops base currency",
            "readOnly": true,
            "example": 115.6
          },
          "amountToPayInBaseCurrency": {
            "type": "number",
            "description": "The total amount to pay, in the shops base currency",
            "readOnly": true,
            "example": 778
          },
          "createdAt": {
            "type": "string",
            "description": "A timestamp of when the order was created. The time should be formatted using ISO-8601",
            "example": "2018-06-17T13:46:55+02:00"
          },
          "customerId": {
            "type": "integer",
            "description": "The ID of the orders customer",
            "example": 101
          },
          "statusId": {
            "type": "integer",
            "description": "The ID of the orders status",
            "example": 1
          },
          "onOrderStatusChangeSendEmail": {
            "type": "boolean",
            "description": "Set this to false to prevent sending email to customer on changes to statusId and new orders",
            "example": true,
            "writeOnly": true,
            "default": true
          },
          "onOrderStatusChangeProcessPayment": {
            "type": "boolean",
            "description": "Set this to false to prevent processing payment on changes to statusId. Only applies to payment methods that support processing payments. For example charging a reserved amount or cancel a created invoice",
            "writeOnly": true,
            "example": true,
            "default": true
          },
          "shippingMethodId": {
            "type": "integer",
            "description": "The ID of the orders shipping method",
            "example": 1
          },
          "paymentMethodId": {
            "type": "integer",
            "description": "The ID of the orders payment method",
            "example": 1
          },
          "paymentMethodIdCode": {
            "type": "string",
            "description": "The ID code of the payment method.",
            "readOnly": true,
            "example": "custom"
          },
          "paymentMethodName": {
            "type": "string",
            "description": "Title of the orders payment method",
            "maxLength": 30,
            "example": "Bankgiro"
          },
          "paymentFee": {
            "type": "number",
            "description": "Payment fee",
            "minimum": 0,
            "example": 23.2
          },
          "paymentVatRate": {
            "type": "number",
            "description": "The VAT rate of the paymentFee in percent",
            "example": 25
          },
          "shippingMethodName": {
            "type": "string",
            "description": "Title of the orders shipping method",
            "maxLength": 30,
            "example": "UPS International"
          },
          "shippingCost": {
            "type": "number",
            "description": "Shipping cost",
            "minimum": 0,
            "example": 23.2
          },
          "shippingVatRate": {
            "type": "number",
            "description": "The VAT rate of the shippingCost in percent",
            "example": 25
          },
          "totalWeight": {
            "type": "number",
            "description": "The total weight of the order in kg. This field is a calculated summary of all order items",
            "readOnly": true,
            "example": 0.9
          },
          "customInfo1": {
            "type": "string",
            "description": "Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection",
            "maxLength": 255
          },
          "customInfo2": {
            "type": "string",
            "description": "Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection",
            "maxLength": 255
          },
          "customInfo3": {
            "type": "string",
            "description": "Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection",
            "maxLength": 255
          },
          "customInfo4": {
            "type": "string",
            "description": "Custom info saved to an order. Can be linked to fields on the checkout page for additional data collection",
            "maxLength": 255
          },
          "discountCode": {
            "type": "string",
            "description": "The code ID of a discount code that was used for this order",
            "maxLength": 20
          },
          "amountPaid": {
            "type": "number",
            "description": "The amount paid via the payment method for this order",
            "example": 778
          },
          "amountPaidInBaseCurrency": {
            "type": "number",
            "description": "Same as amountPaid, but in the shops base currency",
            "readOnly": true,
            "example": 778
          },
          "isComplete": {
            "type": "boolean",
            "description": "Is the order completed (that is, is it completely saved and has the payment method processed and confirmed it)",
            "example": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code of the currency that was used for this order. Has to be a valid ISO 4217 currency code",
            "required": true,
            "minLength": 3,
            "maxLength": 3,
            "example": "SEK"
          },
          "currencyExchangeRate": {
            "type": "number",
            "description": "The exchange rate between this orders currency and the shops base currency. Ff, for example, the shop base currency is SEK and this order was placed in NOK, where 1 SEK = 0.97 NOK - this value would be 0.97",
            "example": 0.97
          },
          "currencyPrecision": {
            "type": "integer",
            "description": "The number of decimals to display",
            "example": 2
          },
          "langCode": {
            "type": "string",
            "description": "Language Code (ISO 639-1) used for placing this order. Has to be a valid lang code that the shop has setup. Used for order update emails, etc.",
            "minLength": 2,
            "maxLength": 2,
            "example": "sv"
          },
          "paymentReference": {
            "type": "string",
            "description": "Reference to the payment methods payment transaction",
            "maxLength": 80
          },
          "paymentStatus": {
            "type": "string",
            "description": "Status of the payment methods payment transaction",
            "maxLength": 20,
            "example": "reserved"
          },
          "isRead": {
            "type": "boolean",
            "description": "An order is read when an administrator has read it via the admin GUI"
          },
          "hasComment": {
            "type": "boolean",
            "description": "Whether the customer or an admin has added a comment to the order",
            "readOnly": true
          },
          "internalComment": {
            "type": "string",
            "description": "An internal comment placed by an administrator. Not available to the customer",
            "example": "Lorem ipsum..."
          },
          "shippingTrackerType": {
            "type": "integer",
            "description": "The ID of the tracking number type. Types are available via: GET /shipping-tracker-types",
            "example": 1
          },
          "shippingTrackingNo": {
            "type": "string",
            "description": "The shipping tracking number. Has to be in the format that is used for the chosen tracking type (please contact the freight forwarder regarding this).",
            "maxLength": 50
          },
          "originalCustomerEmail": {
            "type": "string",
            "description": "The email address of the customer at the point of order creation",
            "required": true,
            "example": "john.doe@example.net"
          },
          "originalCustomerNationalIdNo": {
            "type": "string",
            "description": "The national id number of the customer at the point of order creation"
          },
          "originalCustomerVatNo": {
            "type": "string",
            "description": "The VAT number of the customer at the point of order creation"
          },
          "originalCustomerCustomInfo1": {
            "type": "string",
            "description": "Custom customer info at the point of order creation"
          },
          "originalCustomerCustomInfo2": {
            "type": "string",
            "description": "Custom customer info at the point of order creation"
          },
          "items": {
            "type": "array",
            "description": "A collection of order items",
            "items": {
              "$ref": "#/components/schemas/OrderItemModel"
            }
          },
          "addresses": {
            "$ref": "#/components/schemas/OrderAddressModel"
          }
        }
      },
      "OrderModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OrderModel"
          }
        }
      },
      "OrderModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A list of orders",
            "items": {
              "$ref": "#/components/schemas/OrderModel"
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/PaginationModel"
              }
            }
          }
        }
      },
      "ShippingTrackingTypeModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "integer",
            "description": "The shipping tracking type ID",
            "readOnly": true,
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The shipping tracking type name",
            "readOnly": true,
            "example": "Posten Sverige"
          }
        }
      },
      "ShippingTrackingTypeModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A list of shipping tracking types",
            "items": {
              "$ref": "#/components/schemas/ShippingTrackingTypeModel"
            }
          }
        }
      },
      "AddressModel": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string",
            "description": "Company name",
            "maxLength": 80,
            "example": "Example Ltd."
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "maxLength": 35,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "maxLength": 35,
            "example": "Doe"
          },
          "careOf": {
            "type": "string",
            "description": "Care Of",
            "maxLength": 80
          },
          "attention": {
            "type": "string",
            "description": "Attention",
            "maxLength": 80
          },
          "reference": {
            "type": "string",
            "description": "Reference",
            "maxLength": 80
          },
          "address": {
            "type": "string",
            "description": "Address",
            "maxLength": 50,
            "example": "Street 1"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal Code",
            "maxLength": 12,
            "example": "214 31"
          },
          "city": {
            "type": "string",
            "description": "City",
            "maxLength": 30,
            "example": "My Town"
          },
          "state": {
            "type": "string",
            "description": "State",
            "maxLength": 30
          },
          "countryCode": {
            "type": "string",
            "description": "Country code in ISO 3166-1 alpha-2 format",
            "maxLength": 2,
            "minLength": 2,
            "example": "SE"
          },
          "phoneNo": {
            "type": "string",
            "description": "Phone number in an international format",
            "maxLength": 30,
            "example": "+46406020900"
          },
          "mobilePhoneNo": {
            "type": "string",
            "description": "Mobile phone number in an international format",
            "maxLength": 30,
            "example": "+46850910000"
          }
        }
      },
      "AddressModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AddressModel"
          }
        }
      },
      "OrderAddressModel": {
        "type": "object",
        "properties": {
          "originalInvoice": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "originalDelivery": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "customerInvoice": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "customerDelivery": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "paymentMethodInvoice": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "paymentMethodDelivery": {
            "$ref": "#/components/schemas/AddressModel"
          }
        }
      },
      "OrderAddressCollection": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OrderAddressModel"
          }
        }
      },
      "OrderStatusModel": {
        "type": "object",
        "properties": {
          "statusId": {
            "type": "integer",
            "description": "The id of the order status",
            "readOnly": true,
            "example": 1
          },
          "sendEmail": {
            "type": "boolean",
            "description": "Should an order status update email be sent out when an order gets this status"
          },
          "idCode": {
            "type": "string",
            "description": "Standard order statuses has an idCode as well. These are: created, picking, completed, canceled",
            "readOnly": true,
            "example": "created"
          },
          "languages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderStatusLanguageModel"
            }
          }
        }
      },
      "OrderStatusLanguageModel": {
        "type": "object",
        "properties": {
          "langCode": {
            "type": "string",
            "required": true,
            "description": "Language Code (ISO 639-1) for this translation. Has to be a valid lang code that the shop has setup. ",
            "minLength": 2,
            "maxLength": 2,
            "example": "sv"
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "description": "The name of this order status",
            "example": "Order Created"
          }
        }
      },
      "OrderStatusModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OrderStatusModel"
          }
        }
      },
      "OrderStatusModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A list of order statuses",
            "items": {
              "$ref": "#/components/schemas/OrderStatusModel"
            }
          }
        }
      },
      "OrderItemModel": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "integer",
            "description": "The id of the order item",
            "readOnly": true,
            "example": 1
          },
          "sku": {
            "type": "string",
            "maxLength": 40,
            "description": "The SKU of the order item",
            "example": "ABC123"
          },
          "description": {
            "type": "string",
            "required": true,
            "maxLength": 255,
            "description": "The description of the order item",
            "example": "An item"
          },
          "quantity": {
            "type": "integer",
            "min": 1,
            "max": 1000000,
            "description": "The quantity of the order item",
            "example": 1
          },
          "unitSymbol": {
            "type": "string",
            "maxLength": 5,
            "description": "The unit symbol of the order item",
            "example": "pcs."
          },
          "unitPrice": {
            "type": "number",
            "description": "The price per unit excluding VAT",
            "example": 23.2
          },
          "vatRate": {
            "type": "number",
            "min": 0,
            "max": 100,
            "description": "The items VAT rate in percent. 25.0 = 25% VAT",
            "example": 25
          },
          "discount": {
            "type": "number",
            "min": 0,
            "description": "The discount for the entire order row. Either as a percentage or an amount. If this is an amount and set to 20.0, the sum 20.0 will be subtracted from the order total no matter what the quantity is set to.",
            "example": 8
          },
          "discountType": {
            "type": "string",
            "enum": [
              "amount",
              "percent"
            ],
            "description": "The type of discount. Either ”amount” or ”percent”. Default is ”percent”",
            "example": "percent"
          },
          "sortIndex": {
            "type": "integer",
            "min": 0,
            "description": "The sort order of the order items"
          }
        }
      },
      "OrderItemModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OrderItemModel"
          }
        }
      },
      "OrderItemModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A list of order items",
            "items": {
              "$ref": "#/components/schemas/OrderItemModel"
            }
          }
        }
      },
      "OrderExternalServiceModel": {
        "type": "object",
        "properties": {
          "serviceName": {
            "type": "string",
            "maxLength": 40,
            "description": "The service name that this external id is linked to",
            "example": "Fortnox"
          },
          "externalIdValue": {
            "type": "string",
            "maxLength": 40,
            "description": "The external id",
            "example": "ABC123"
          },
          "readOnly": {
            "type": "boolean",
            "description": "Some external services cannot be updated and they have readOnly set to true",
            "readOnly": true,
            "example": false
          }
        }
      },
      "OrderExternalServicesModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OrderExternalServiceModel"
          }
        }
      },
      "OrderExternalServiceModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A list of order external services",
            "items": {
              "$ref": "#/components/schemas/OrderExternalServiceModel"
            }
          }
        }
      },
      "CurrencyModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "readOnly": true,
            "example": "SEK",
            "description": "The currency code"
          },
          "exchangeRate": {
            "type": "number",
            "example": "1.0",
            "description": "The exchange rate against the shops default currency. Used in reports, etc. The default currency can be fetched from /shop"
          },
          "precision": {
            "type": "integer",
            "example": 0,
            "description": "The number of decimals to show and use"
          }
        }
      },
      "CurrencyModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CurrencyModel"
          }
        }
      },
      "CurrencyCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of currencies",
            "items": {
              "$ref": "#/components/schemas/CurrencyModel"
            }
          }
        }
      },
      "CustomerUpdateModel": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "integer",
            "description": "The customers ID",
            "readOnly": true,
            "example": 101
          },
          "createdAt": {
            "type": "string",
            "description": "A timestamp of when the customer was created. The time should be formatted using ISO-8601",
            "example": "2018-06-17T13:46:55+02:00"
          },
          "type": {
            "type": "string",
            "required": true,
            "description": "The type of customer this is. Either: ”person” or ”company”",
            "example": "person"
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "required": true,
            "description": "Email address of the customer"
          },
          "nationalIdNo": {
            "type": "string",
            "maxLength": 20,
            "description": "National id number of the customer"
          },
          "vatNo": {
            "type": "string",
            "maxLength": 20,
            "description": "VAT number of the customer"
          },
          "customInfo1": {
            "type": "string",
            "maxLength": 255,
            "description": "Custom info saved to a customer. Can be linked to text fields on the customer registration page for additional data collection"
          },
          "customInfo2": {
            "type": "string",
            "maxLength": 255,
            "description": "Custom info saved to a customer. Can be linked to text fields on the customer registration page for additional data collection"
          },
          "addresses": {
            "type": "object",
            "properties": {
              "invoice": {
                "$ref": "#/components/schemas/AddressModel"
              },
              "delivery": {
                "$ref": "#/components/schemas/AddressModel"
              }
            }
          }
        }
      },
      "CustomerModel": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "integer",
            "description": "The customers ID",
            "readOnly": true,
            "example": 101
          },
          "createdAt": {
            "type": "string",
            "description": "A timestamp of when the customer was created. The time should be formatted using ISO-8601",
            "example": "2018-06-17T13:46:55+02:00"
          },
          "type": {
            "type": "string",
            "required": true,
            "description": "The type of customer this is. Either: ”person” or ”company”",
            "example": "person"
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "required": true,
            "description": "Email address of the customer"
          },
          "nationalIdNo": {
            "type": "string",
            "maxLength": 20,
            "description": "National id number of the customer"
          },
          "vatNo": {
            "type": "string",
            "maxLength": 20,
            "description": "VAT number of the customer"
          },
          "customInfo1": {
            "type": "string",
            "maxLength": 255,
            "description": "Custom info saved to a customer. Can be linked to text fields on the customer registration page for additional data collection"
          },
          "customInfo2": {
            "type": "string",
            "maxLength": 255,
            "description": "Custom info saved to a customer. Can be linked to text fields on the customer registration page for additional data collection"
          },
          "modifiedAt": {
            "type": "string",
            "description": "A timestamp of when the customer was modified. The time should be formatted using ISO-8601",
            "example": "2018-06-17T13:46:55+02:00",
            "readOnly": true
          },
          "approved": {
            "type": "boolean",
            "nullable": true,
            "description": "If the customer is approved or not. Can be null if the customer is neither approved nor disapproved yet",
            "readOnly": true
          },
          "approvedAt": {
            "type": "string",
            "description": "A timestamp of when the customer was was approved/disapproved. The time should be formatted using ISO-8601",
            "example": "2018-06-17T13:46:55+02:00",
            "readOnly": true
          },
          "pricelistId": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the pricelist the customer is linked to (or null if the customer has no specific pricelist linked)",
            "readOnly": true
          },
          "tags": {
            "$ref": "#/components/schemas/CustomerTagModelCollection"
          },
          "addresses": {
            "$ref": "#/components/schemas/CustomerAddressesModelCollection"
          },
          "externalServices": {
            "$ref": "#/components/schemas/CustomerExternalServicesModelCollection"
          }
        }
      },
      "CustomerModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CustomerModel"
          }
        }
      },
      "CustomerModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A list of customers",
            "items": {
              "$ref": "#/components/schemas/CustomerModel"
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/PaginationModel"
              }
            }
          }
        }
      },
      "CustomerAddedTagModel": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "integer",
            "required": true,
            "min": 1,
            "description": "The id of the tag",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the tag",
            "readOnly": true,
            "example": "Exclusive customers"
          }
        }
      },
      "CustomerAddedTagModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CustomerAddedTagModel"
          }
        }
      },
      "CustomerAddedTagModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A list of customer tags",
            "items": {
              "$ref": "#/components/schemas/CustomerAddedTagModel"
            }
          }
        }
      },
      "CustomerAddressesModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AddressModel"
          }
        }
      },
      "CustomerAddressesModelCollection": {
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "invoice": {
                "$ref": "#/components/schemas/AddressModel"
              },
              "delivery": {
                "$ref": "#/components/schemas/AddressModel"
              }
            }
          }
        }
      },
      "CustomerExternalServicesModel": {
        "type": "object",
        "properties": {
          "serviceName": {
            "type": "string",
            "description": "The service name of the external service",
            "example": "Fortnox",
            "required": true,
            "maxLength": 20
          },
          "externalIdValue": {
            "type": "string",
            "description": "The external service ID",
            "example": "ABC123",
            "required": true,
            "maxLength": 40
          }
        }
      },
      "CustomerExternalServicesModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CustomerExternalServicesModel"
          }
        }
      },
      "CustomerExternalServicesModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A list of customer external services",
            "items": {
              "$ref": "#/components/schemas/CustomerExternalServicesModel"
            }
          }
        }
      },
      "TokenModel": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The Access Token to use in future requests",
            "readOnly": true,
            "example": "2YotnFZFEjr1zCsicMWpAA"
          },
          "scope": {
            "type": "string",
            "description": "The scope this access token is valid for",
            "readOnly": true
          },
          "expires_in": {
            "type": "integer",
            "description": "The number of seconds until this access token expires",
            "readOnly": true,
            "example": 3600
          }
        }
      },
      "ClientCredentialModel": {
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "The grant type to use for the request. At this time, only client_credentials is allowed",
            "example": "client_credentials"
          },
          "client_id": {
            "type": "string",
            "description": "Your client id",
            "example": "your-client-id"
          },
          "client_secret": {
            "type": "string",
            "description": "Your client secret",
            "example": "your-client-secret"
          }
        }
      },
      "CustomerTagModel": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "integer",
            "description": "The tag Id",
            "readOnly": true,
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The tag name",
            "readOnly": true,
            "example": "Exclusive customers"
          }
        }
      },
      "CustomerTagModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CustomerTagModel"
          }
        }
      },
      "CustomerTagModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A list of customer tags",
            "items": {
              "$ref": "#/components/schemas/CustomerTagModel"
            }
          }
        }
      },
      "PaymentMethodLanguageModel": {
        "type": "object",
        "properties": {
          "langCode": {
            "type": "string",
            "readOnly": true,
            "description": "Language code"
          },
          "name": {
            "type": "string",
            "description": "Name of payment method",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "Title of payment method",
            "readOnly": true
          },
          "shortDescription": {
            "type": "string",
            "description": "A shorter informative description",
            "readOnly": true
          }
        }
      },
      "PaymentMethodLanguageModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of payment method languages",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodLanguageModel"
            }
          }
        }
      },
      "PaymentMethodModel": {
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "integer",
            "readOnly": true,
            "example": 1,
            "description": "The payment methods Id"
          },
          "idCode": {
            "type": "string",
            "readOnly": true,
            "example": "custom",
            "description": "The payment methods idCode. This can be used to identify a payment method of a standarized type"
          },
          "active": {
            "type": "boolean",
            "readOnly": true,
            "description": "If the payment method is actively available on checkout or not"
          },
          "fee": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "min": 0,
            "description": "Fee associated with this method"
          },
          "validForCountries": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "all",
              "EU",
              "non-EU",
              "selected",
              "none"
            ],
            "description": "The restrictions to countries this payment method is valid for. Valid values are: all, EU, non-EU, selected, none",
            "example": "all"
          },
          "validCountriesSelected": {
            "type": "array",
            "readOnly": true,
            "description": "The countries this method is valid for (if validForCountries is set to ”selected”)",
            "items": {
              "type": "string",
              "readOnly": true,
              "minLength": 2,
              "maxLength": 2,
              "description": "Country code",
              "example": "SE"
            }
          },
          "validForMinItemsSubtotal": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "min": 0,
            "nullable": true,
            "example": null,
            "description": "The min order sub total that this method is valid for"
          },
          "validForMaxItemsSubtotal": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "min": 0,
            "nullable": true,
            "example": null,
            "description": "The max order sub total that this method is valid for"
          },
          "validForMinWeight": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "min": 0,
            "nullable": true,
            "example": null,
            "description": "The min order weight that this method is valid for"
          },
          "validForMaxWeight": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "min": 0,
            "nullable": true,
            "example": null,
            "description": "The max order weight that this method is valid for."
          },
          "validForShippingMethods": {
            "type": "string",
            "readOnly": true,
            "example": "all",
            "enum": [
              "all",
              "selected"
            ],
            "description": "The shipping methods this is valid for. Valid values are: all, selected"
          },
          "validForCustomerType": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "example": null,
            "description": "The customer type this method is valid for. Valid values are: null (no restriction), person, company"
          },
          "languages": {
            "$ref": "#/components/schemas/PaymentMethodLanguageModelCollection"
          }
        }
      },
      "PaymentMethodModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PaymentMethodModel"
          }
        }
      },
      "PaymentMethodModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of payment methods",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodModel"
            }
          }
        }
      },
      "ShippingMethodLanguageModel": {
        "type": "object",
        "properties": {
          "langCode": {
            "type": "string",
            "readOnly": true,
            "description": "Language code"
          },
          "name": {
            "type": "string",
            "description": "Name of shipping method",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "Title of shipping method",
            "readOnly": true
          },
          "shortDescription": {
            "type": "string",
            "description": "A shorter informative description",
            "readOnly": true
          }
        }
      },
      "ShippingMethodLanguageModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of shipping method languages",
            "items": {
              "$ref": "#/components/schemas/ShippingMethodLanguageModel"
            }
          }
        }
      },
      "ShippingMethodModel": {
        "type": "object",
        "properties": {
          "shippingMethodId": {
            "type": "integer",
            "readOnly": true,
            "example": 1,
            "description": "The shipping methods Id"
          },
          "active": {
            "type": "boolean",
            "readOnly": true,
            "description": "If the shipping method is actively available on checkout or not"
          },
          "validForCountries": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "all",
              "EU",
              "non-EU",
              "selected",
              "none"
            ],
            "description": "The restrictions to countries this shipping method is valid for. Valid values are: all, EU, non-EU, selected, none",
            "example": "all"
          },
          "validCountriesSelected": {
            "type": "array",
            "readOnly": true,
            "description": "The countries this method is valid for (if validForCountries is set to ”selected”)",
            "items": {
              "type": "string",
              "readOnly": true,
              "minLength": 2,
              "maxLength": 2,
              "description": "Country code",
              "example": "SE"
            }
          },
          "validForMinItemsSubtotal": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "min": 0,
            "nullable": true,
            "example": null,
            "description": "The min order sub total that this method is valid for"
          },
          "validForMaxItemsSubtotal": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "min": 0,
            "nullable": true,
            "example": null,
            "description": "The max order sub total that this method is valid for"
          },
          "validForMinWeight": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "min": 0,
            "nullable": true,
            "example": null,
            "description": "The min order weight that this method is valid for"
          },
          "validForMaxWeight": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "min": 0,
            "nullable": true,
            "example": null,
            "description": "The max order weight that this method is valid for."
          },
          "validForCustomerType": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "example": null,
            "description": "The customer type this method is valid for. Valid values are: null (no restriction), person, company"
          },
          "freeShippingMinItemsSubtotal": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "min": 0,
            "nullable": true,
            "example": null,
            "description": "Offer free shipping with this method if the minimum order sub total amount is at least this value"
          },
          "freeShippingMinWeight": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "min": 0,
            "nullable": true,
            "example": null,
            "description": "Offer free shipping with this method if the minimum order total weight is at least this value"
          },
          "languages": {
            "$ref": "#/components/schemas/ShippingMethodLanguageModelCollection"
          }
        }
      },
      "ShippingMethodModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ShippingMethodModel"
          }
        }
      },
      "ShippingMethodModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of shipping methods",
            "items": {
              "$ref": "#/components/schemas/ShippingMethodModel"
            }
          }
        }
      },
      "PricelistModel": {
        "type": "object",
        "properties": {
          "pricelistId": {
            "type": "integer",
            "readOnly": true,
            "example": 1,
            "description": "The shipping methods Id"
          },
          "name": {
            "type": "string",
            "maxLength": 30,
            "readOnly": true,
            "example": "My pricelist",
            "description": "The name of this pricelist"
          },
          "isMaster": {
            "type": "boolean",
            "readOnly": true,
            "example": true,
            "description": "If this pricelist is the default ”master” pricelist or not. Only one pricelist can be the master pricelist"
          },
          "countryCodes": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "example": "SE"
            },
            "example": [
              "SE",
              "DK"
            ],
            "description": "The countryCodes this pricelist is valid for"
          },
          "currencyCode": {
            "type": "string",
            "length": 3,
            "readOnly": true,
            "example": "SEK",
            "description": "The currencyCode this pricelist is valid for"
          },
          "parentPricelistId": {
            "type": "integer",
            "default": null,
            "example": null,
            "description": "Does this pricelist has a parent price list. "
          },
          "isCustomerPricelist": {
            "type": "boolean",
            "description": "Is this pricelist a ”customer” pricelist (for selected customer groups)"
          },
          "isCountryPricelist": {
            "type": "boolean",
            "description": "Is this pricelist a ”country” pricelist (base pricelist for a certain country)"
          }
        }
      },
      "PricelistModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PricelistModel"
          }
        }
      },
      "PricelistModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of shipping methods",
            "items": {
              "$ref": "#/components/schemas/PricelistModel"
            }
          }
        }
      },
      "OrderCommentModel": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "integer",
            "description": "The comments id",
            "readOnly": true,
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "description": "A timestamp of when the comment was created. The time should be formatted using ISO-8601",
            "example": "2018-06-17T13:46:55+02:00",
            "readOnly": true
          },
          "text": {
            "type": "string",
            "description": "The comment",
            "readOnly": true,
            "example": "Lorem ipsum"
          },
          "from": {
            "type": "string",
            "description": "The author of the comment. Either ”admin” or ”customer”",
            "readOnly": true,
            "example": "customer"
          }
        }
      },
      "OrderCommentModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OrderCommentModel"
          }
        }
      },
      "OrderCommentModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A list of order comments",
            "items": {
              "$ref": "#/components/schemas/OrderCommentModel"
            }
          }
        }
      },
      "MediaFileUploadModel": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "example": "[binary data]"
          }
        }
      },
      "MediaFileModel": {
        "type": "object",
        "properties": {
          "mediaFileId": {
            "type": "integer",
            "description": "The media file ID",
            "readOnly": true,
            "example": 101
          },
          "name": {
            "type": "string",
            "description": "The name of the media file",
            "readOnly": true,
            "example": "my-image.jpg"
          },
          "createdAt": {
            "type": "string",
            "description": "A timestamp of when the media file was created. The time should be formatted using ISO-8601",
            "example": "2018-06-17T13:46:55+02:00",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "description": "A timestamp of when the media file was modifies. The time should be formatted using ISO-8601",
            "example": "2018-06-17T13:46:55+02:00",
            "readOnly": true
          },
          "size": {
            "type": "integer",
            "description": "The media files size in bytes",
            "readOnly": true,
            "example": 1157115
          },
          "mime": {
            "type": "string",
            "description": "The media files mime type",
            "readOnly": true,
            "example": "image/jpeg"
          },
          "height": {
            "type": "integer",
            "description": "The media files height in pixels",
            "readOnly": true,
            "example": 2000
          },
          "width": {
            "type": "integer",
            "description": "The media files width in pixels",
            "readOnly": true,
            "example": 2000
          },
          "url": {
            "type": "string",
            "description": "The media files URL",
            "readOnly": true,
            "example": "https://cdn.starwebserver.se/shops/leksaker/files/56220.jpg"
          }
        }
      },
      "MediaFileModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MediaFileModel"
          }
        }
      },
      "MediaFileModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of media files",
            "items": {
              "$ref": "#/components/schemas/MediaFileModel"
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/PaginationModel"
              }
            }
          }
        }
      },
      "ProductCategoryModel": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "integer",
            "description": "The product category Id",
            "readOnly": true,
            "example": 101
          },
          "parentId": {
            "type": "integer",
            "description": "The category`s parent`s Id",
            "example": 99
          },
          "visibility": {
            "type": "string",
            "description": "The category`s visibility settings. Possible values are: visible, hidden and pricelists. Pricelists means that the category is only visible for customers with access to specific pricelists",
            "example": "visible"
          },
          "sortIndex": {
            "type": "integer",
            "description": "Sort index. A category with a lower value is displayed higher up in lists",
            "example": 9
          },
          "openPage": {
            "type": "boolean",
            "description": "Whether or not links to the category should open a category page listing its products and sub categories on click.",
            "example": true
          },
          "imageFileId": {
            "type": "integer",
            "description": "The Id to the category`s image file. Has to be an existing mediaFile",
            "example": 14
          },
          "externalType": {
            "type": "string",
            "description": "The system name the externalId belongs to.",
            "maxLength": 20,
            "example": "Fortnox"
          },
          "externalId": {
            "type": "string",
            "description": "The external Id for this category for the system named in externalType",
            "maxLength": 40,
            "example": "123"
          },
          "hasChildren": {
            "type": "boolean",
            "description": "Whether or not the category has any children categories",
            "readOnly": true,
            "example": true
          },
          "languages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCategoryLanguagesModel"
            }
          }
        }
      },
      "ProductCategoryLanguagesModel": {
        "type": "object",
        "properties": {
          "langCode": {
            "type": "string",
            "required": true,
            "description": "Language Code (ISO 639-1) for this translation. Has to be a valid lang code that the shop supports. ",
            "minLength": 2,
            "maxLength": 2,
            "example": "sv"
          },
          "name": {
            "type": "string",
            "maxLength": 90,
            "description": "The name of this product category",
            "example": "My category"
          },
          "pageTitle": {
            "type": "string",
            "maxLength": 90,
            "description": "The page title for this product category",
            "example": "My category - find products here!"
          },
          "description": {
            "type": "string",
            "maxLength": 65535,
            "description": "The main/top description of this product category",
            "example": "Lorem ipsum..."
          },
          "bottomDescription": {
            "type": "string",
            "maxLength": 65535,
            "description": "The extra/bottom description of this product category",
            "example": "Lorem ipsum..."
          },
          "pageMetaDescription": {
            "type": "string",
            "maxLength": 278,
            "description": "The page meta data description of this product category",
            "example": "Lorem ipsum..."
          },
          "permalink": {
            "type": "string",
            "maxLength": 128,
            "description": "The permalink to this product category. Will auto generate if left out",
            "example": "my-category"
          }
        }
      },
      "ProductCategoryModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProductCategoryModel"
          }
        }
      },
      "ProductCategoryModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A list of product categories",
            "items": {
              "$ref": "#/components/schemas/ProductCategoryModel"
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/PaginationModel"
              }
            }
          }
        }
      },
      "ProductModel": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "readOnly": true,
            "example": 101
          },
          "createdAt": {
            "type": "string",
            "description": "A timestamp of when the product was created. The time should be formatted using ISO-8601",
            "example": "2018-06-17T13:46:55+02:00"
          },
          "defaultVatRate": {
            "type": "string",
            "default": null,
            "nullable": true,
            "description": "The default vat rate for this product. Will fall back to shop default if null. To fetch country specific vat rates, please use include=vatRates or use the /products/x/vat-rates endpoint."
          },
          "visibility": {
            "type": "string",
            "default": "hidden",
            "description": "The visibility of this product. Supported values are: hidden, visible, pricelists"
          },
          "moreInfoUrl": {
            "type": "string",
            "maxLength": 255,
            "description": "A valid URL to a web page with more information for this product"
          },
          "manufacturerId": {
            "type": "integer",
            "default": null,
            "description": "The id of the manufacturer to use for this product. Fetch and handle available manufacturers using the /product-manufacturers endpoint"
          },
          "unitId": {
            "type": "integer",
            "default": null,
            "description": "The id of the unit to use for this product if not standard. Fetch and handle available units using the /product-units endpoint"
          },
          "sortIndex": {
            "type": "integer",
            "default": null,
            "min": 1,
            "max": 10000,
            "description": "Sort index for this product in a list"
          },
          "isBackInStockWatchable": {
            "type": "boolean",
            "default": true,
            "description": "Should this product be watchable for customers when it is back in stock?"
          },
          "hasSeveralVariants": {
            "type": "boolean",
            "description": "Indicates if the products has several variants or not. The remaining variants can be fetched using the /products/{product id}/variants endpoint",
            "readOnly": true,
            "example": false
          },
          "modifiedAt": {
            "type": "string",
            "description": "A timestamp of when the product was modified. The time should be formatted using ISO-8601",
            "example": "2018-06-17T13:46:55+02:00",
            "readOnly": true
          },
          "variants": {
            "$ref": "#/components/schemas/ProductVariantModelCollection"
          },
          "mediaFiles": {
            "$ref": "#/components/schemas/ProductMediaFileLinkModelCollection"
          },
          "languages": {
            "$ref": "#/components/schemas/ProductLanguageModelCollection"
          },
          "vatRates": {
            "$ref": "#/components/schemas/ProductVatRateModelCollection"
          },
          "categories": {
            "$ref": "#/components/schemas/ProductCategoryLinkModelCollection"
          },
          "unit": {
            "$ref": "#/components/schemas/ProductUnitModelItem"
          },
          "metaData": {
            "$ref": "#/components/schemas/ProductMetaDataModelCollection"
          }
        }
      },
      "ProductModelUpdatable": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "readOnly": true,
            "example": 101
          },
          "createdAt": {
            "type": "string",
            "description": "A timestamp of when the product was created. The time should be formatted using ISO-8601",
            "example": "2018-06-17T13:46:55+02:00"
          },
          "defaultVatRate": {
            "type": "string",
            "default": null,
            "nullable": true,
            "description": "The default vat rate for this product. Will fall back to shop default if null. To fetch country specific vat rates, please use include=vatRates or use the /products/x/vat-rates endpoint."
          },
          "visibility": {
            "type": "string",
            "default": "hidden",
            "description": "The visibility of this product. Supported values are: hidden, visible, pricelists"
          },
          "moreInfoUrl": {
            "type": "string",
            "maxLength": 255,
            "description": "A valid URL to a web page with more information for this product"
          },
          "manufacturerId": {
            "type": "integer",
            "default": null,
            "description": "The id of the manufacturer to use for this product. Fetch and handle available manufacturers using the /product-manufacturers endpoint"
          },
          "unitId": {
            "type": "integer",
            "default": null,
            "description": "The id of the unit to use for this product if not standard. Fetch and handle available units using the /product-units endpoint"
          },
          "sortIndex": {
            "type": "integer",
            "default": null,
            "min": 1,
            "max": 10000,
            "description": "Sort index for this product in a list"
          },
          "isBackInStockWatchable": {
            "type": "boolean",
            "default": true,
            "description": "Should this product be watchable for customers when it is back in stock?"
          },
          "hasSeveralVariants": {
            "type": "boolean",
            "description": "Indicates if the products has several variants or not. The remaining variants can be fetched using the /products/{product id}/variants endpoint",
            "readOnly": true,
            "example": false
          },
          "modifiedAt": {
            "type": "string",
            "description": "A timestamp of when the product was modified. The time should be formatted using ISO-8601",
            "example": "2018-06-17T13:46:55+02:00",
            "readOnly": true
          },
          "variants": {
            "type": "array",
            "description": "A collection of variants",
            "items": {
              "$ref": "#/components/schemas/ProductVariantModel"
            }
          },
          "mediaFiles": {
            "type": "array",
            "description": "A collection of media files",
            "items": {
              "$ref": "#/components/schemas/ProductMediaFileLinkModel"
            }
          },
          "languages": {
            "type": "array",
            "description": "A collection of product languages",
            "items": {
              "$ref": "#/components/schemas/ProductLanguageModel"
            }
          },
          "vatRates": {
            "type": "array",
            "description": "A collection of country specific vat rates",
            "items": {
              "$ref": "#/components/schemas/ProductVatRateModel"
            }
          },
          "categories": {
            "type": "array",
            "description": "A collection of categories",
            "items": {
              "$ref": "#/components/schemas/ProductCategoryLinkModel"
            }
          },
          "metaData": {
            "type": "array",
            "description": "A collection of meta data",
            "items": {
              "$ref": "#/components/schemas/ProductMetaDataModelUpdatable"
            }
          }
        }
      },
      "ProductModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProductModel"
          }
        }
      },
      "ProductModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of products",
            "items": {
              "$ref": "#/components/schemas/ProductModel"
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/PaginationModel"
              }
            }
          }
        }
      },
      "ProductVariantModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProductVariantModel"
          }
        }
      },
      "ProductVariantModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of product variants",
            "items": {
              "$ref": "#/components/schemas/ProductVariantModel"
            }
          }
        }
      },
      "ProductVariantModel": {
        "type": "object",
        "properties": {
          "sku": {
            "type": "string",
            "maxLength": 40,
            "required": true,
            "description": "The product variants SKU (stock keeping unit)"
          },
          "isActive": {
            "type": "boolean",
            "default": true,
            "description": "Is this variant active? Only active variants are visible to customers"
          },
          "stockStatusId": {
            "type": "integer",
            "default": null,
            "description": "The ID of the variants stock status. Available stock statuses can be fetched using the /product-stock-statuses endpoint"
          },
          "stockQuantity": {
            "type": "integer",
            "default": null,
            "max": 100000000,
            "min": -100000000,
            "description": "The current stock quantity for this variant"
          },
          "weightInKg": {
            "type": "number",
            "format": "float",
            "default": null,
            "min": 0,
            "description": "The variants weight in KG",
            "example": 0.15
          },
          "costPrice": {
            "type": "string",
            "min": 0,
            "default": null,
            "description": "The cost for this variant. Used for statistic and never displayed to customers"
          },
          "ean": {
            "type": "string",
            "maxLength": 20,
            "description": "European article no"
          },
          "mpn": {
            "type": "string",
            "maxLength": 40,
            "description": "Manufacturer part no"
          },
          "imageFileId": {
            "type": "integer",
            "default": null
          },
          "attributeValueLinks": {
            "type": "array",
            "description": "An array of attribute value IDs that this variant belongs to. This field is mandatory for products variants if the product´s hasSeveralVariants field is set to true",
            "items": {
              "type": "integer",
              "min": 1,
              "description": "The ID of the attribute value"
            }
          },
          "prices": {
            "type": "array",
            "description": "A collection of product variant prices",
            "items": {
              "$ref": "#/components/schemas/ProductVariantPriceModel"
            }
          },
          "attributes": {
            "type": "array",
            "description": "A collection of product variant attribute values",
            "items": {
              "$ref": "#/components/schemas/ProductVariantAttributeValueModel"
            }
          }
        }
      },
      "ProductMediaFileLinkModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProductMediaFileLinkModel"
          }
        }
      },
      "ProductMediaFileLinkModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of product media file links",
            "items": {
              "$ref": "#/components/schemas/ProductMediaFileLinkModel"
            }
          }
        }
      },
      "ProductMediaFileLinkModel": {
        "type": "object",
        "properties": {
          "productMediaFileId": {
            "type": "integer",
            "readOnly": true,
            "description": "This links ID"
          },
          "mediaFileId": {
            "type": "integer",
            "nonEmpty": true,
            "description": "The media file this link points to. You can fetch available media files from the /media-files endpoint"
          },
          "sortIndex": {
            "type": "integer",
            "description": "The sort index of these media file links. Note that after the item is saved the sort index will be rearranged so that the item with the lowest sort index always get sort index 0, the next one 1, and so on."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of file this link points to. Can be either ”image” or ”document”",
            "example": "image"
          }
        }
      },
      "ProductLanguageModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProductLanguageModel"
          }
        }
      },
      "ProductLanguageModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of product languages",
            "items": {
              "$ref": "#/components/schemas/ProductLanguageModel"
            }
          }
        }
      },
      "ProductLanguageModel": {
        "type": "object",
        "properties": {
          "langCode": {
            "type": "string",
            "required": true,
            "description": "The langCode for this language. Supported language codes are: sv, en, no, da, fi, de, fr, es"
          },
          "name": {
            "type": "string",
            "maxLength": 150,
            "required": true,
            "description": "The products name"
          },
          "shortDescription": {
            "type": "string",
            "maxLength": 65535,
            "description": "The products short description"
          },
          "longDescription": {
            "type": "string",
            "maxLength": 65535,
            "description": "The products long description"
          },
          "permalink": {
            "type": "string",
            "maxLength": 128,
            "description": "The permalink for this product and language"
          },
          "pageTitle": {
            "type": "string",
            "maxLength": 90,
            "description": "The page title for this product"
          },
          "pageMetaDescription": {
            "type": "string",
            "maxLength": 278,
            "description": "The meta description for this product"
          }
        }
      },
      "ProductVatRateModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProductVatRateModel"
          }
        }
      },
      "ProductVatRateModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of product vat rates",
            "items": {
              "$ref": "#/components/schemas/ProductVatRateModel"
            }
          }
        }
      },
      "ProductVatRateModel": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "required": true,
            "length": 2,
            "description": "The country code this vat rate should be valid for. The country code should be set using ISO 3166-1 alpha-2"
          },
          "vatRate": {
            "type": "number",
            "format": "float",
            "default": "0",
            "min": 0,
            "max": 100,
            "example": 25,
            "description": "The vat rate to use for this country and product"
          }
        }
      },
      "ProductCategoryLinkModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProductCategoryLinkModel"
          }
        }
      },
      "ProductCategoryLinkModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of product category links",
            "items": {
              "$ref": "#/components/schemas/ProductCategoryLinkModel"
            }
          }
        }
      },
      "ProductCategoryLinkModel": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "integer",
            "nonEmpty": true,
            "description": "The category id this product should be listed in"
          },
          "sortIndex": {
            "type": "integer",
            "description": "The sort index this product have in the category"
          }
        }
      },
      "ProductMetaDataModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProductMetaDataModel"
          }
        }
      },
      "ProductMetaDataModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of product meta data",
            "items": {
              "$ref": "#/components/schemas/ProductMetaDataModel"
            }
          }
        }
      },
      "ProductMetaDataModelUpdatable": {
        "type": "object",
        "properties": {
          "metaDataTypeId": {
            "type": "integer",
            "required": true,
            "description": "The ID of the meta data type. Available meta data types can be fetched using the /product-meta-data-types endpoint"
          },
          "sortIndex": {
            "type": "integer",
            "description": "The sort index of this meta data for this product"
          },
          "languages": {
            "type": "array",
            "description": "A collection of product meta data languages",
            "items": {
              "$ref": "#/components/schemas/ProductMetaLanguageDataModel"
            }
          }
        }
      },
      "ProductMetaDataModel": {
        "type": "object",
        "properties": {
          "metaDataTypeId": {
            "type": "integer",
            "required": true,
            "description": "The ID of the meta data type. Available meta data types can be fetched using the /product-meta-data-types endpoint"
          },
          "sortIndex": {
            "type": "integer",
            "description": "The sort index of this meta data for this product"
          },
          "languages": {
            "$ref": "#/components/schemas/ProductMetaLanguageDataModelCollection"
          }
        }
      },
      "ProductMetaLanguageDataModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProductMetaLanguageDataModel"
          }
        }
      },
      "ProductMetaLanguageDataModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of product meta data",
            "items": {
              "$ref": "#/components/schemas/ProductMetaLanguageDataModel"
            }
          }
        }
      },
      "ProductMetaLanguageDataModel": {
        "type": "object",
        "properties": {
          "langCode": {
            "type": "string",
            "required": true,
            "description": "The langCode for this language"
          },
          "value": {
            "type": "string",
            "required": true,
            "maxLength": 255,
            "description": "The value for this meta data"
          }
        }
      },
      "ProductUnitModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of product units",
            "items": {
              "$ref": "#/components/schemas/ProductUnitModel"
            }
          }
        }
      },
      "ProductUnitModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProductUnitModel"
          }
        }
      },
      "ProductUnitModel": {
        "type": "object",
        "properties": {
          "unitId": {
            "type": "integer",
            "readOnly": true,
            "description": "The units id",
            "minimum": 1,
            "format": "int32",
            "example": 1
          },
          "languages": {
            "$ref": "#/components/schemas/ProductUnitLanguageModelCollection"
          }
        }
      },
      "ProductUnitLanguageModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of product unit languages",
            "items": {
              "$ref": "#/components/schemas/ProductUnitLanguageModel"
            }
          }
        }
      },
      "ProductUnitLanguageModel": {
        "type": "object",
        "properties": {
          "langCode": {
            "type": "string",
            "required": true,
            "description": "The language code for this language",
            "example": "sv"
          },
          "name": {
            "type": "string",
            "required": true,
            "maxLength": 30,
            "langCode": "The name of this unit type",
            "example": "Pieces"
          },
          "symbol": {
            "type": "string",
            "required": true,
            "maxLength": 5,
            "langCode": "The symbol to use when counting this unit. For example ”pcs.”",
            "example": "pcs."
          }
        }
      },
      "ProductVariantPriceModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProductVariantPriceModel"
          }
        }
      },
      "ProductVariantPriceModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of product variants",
            "items": {
              "$ref": "#/components/schemas/ProductVariantPriceModel"
            }
          }
        }
      },
      "ProductVariantPriceModel": {
        "type": "object",
        "properties": {
          "pricelistId": {
            "type": "integer",
            "required": true,
            "description": "The pricelist this price is for"
          },
          "priceExVat": {
            "type": "number",
            "format": "float",
            "min": 0,
            "default": "0",
            "description": "The price excluding vat",
            "example": 15.2
          },
          "specialPriceExVat": {
            "type": "number",
            "format": "float",
            "min": 0,
            "default": null,
            "example": 13.6,
            "description": "The special price excluding vat (a discounted price)"
          }
        }
      },
      "ProductManufacturerModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProductManufacturerModel"
          }
        }
      },
      "ProductManufacturerModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of product manufacturers",
            "items": {
              "$ref": "#/components/schemas/ProductManufacturerModel"
            }
          }
        }
      },
      "ProductManufacturerModel": {
        "type": "object",
        "properties": {
          "manufacturerId": {
            "type": "integer",
            "readOnly": true,
            "description": "The id of this manufacturer",
            "example": 2
          },
          "name": {
            "type": "string",
            "maxLength": 30,
            "required": true,
            "description": "The name of this manufacturer",
            "example": "Example Ltd."
          },
          "url": {
            "type": "string",
            "maxLength": 255,
            "description": "The URL to the manufacturers website",
            "example": "https://example.net"
          }
        }
      },
      "ProductMetaDataTypeModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of product meta data types",
            "items": {
              "$ref": "#/components/schemas/ProductMetaDataTypeModel"
            }
          }
        }
      },
      "ProductMetaDataTypeModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProductMetaDataTypeModel"
          }
        }
      },
      "ProductMetaDataTypeModel": {
        "type": "object",
        "properties": {
          "metaDataTypeId": {
            "type": "integer",
            "readOnly": true,
            "description": "The meta data type id",
            "minimum": 1,
            "format": "int32",
            "example": 1
          },
          "languages": {
            "$ref": "#/components/schemas/ProductMetaDataTypeLanguageModelCollection"
          }
        }
      },
      "ProductMetaDataTypeLanguageModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of product meta data type languages",
            "items": {
              "$ref": "#/components/schemas/ProductMetaDataTypeLanguageModel"
            }
          }
        }
      },
      "ProductMetaDataTypeLanguageModel": {
        "type": "object",
        "properties": {
          "langCode": {
            "type": "string",
            "required": true,
            "description": "The language code for this language",
            "example": "sv"
          },
          "name": {
            "type": "string",
            "required": true,
            "maxLength": 40,
            "langCode": "The name of this meta data type",
            "example": "ISBN"
          }
        }
      },
      "ProductStockStatusModel": {
        "type": "object",
        "properties": {
          "stockStatusId": {
            "type": "integer",
            "readOnly": true,
            "description": "The stock status id",
            "example": 101
          },
          "idCode": {
            "type": "string",
            "maxLength": 20,
            "readOnly": true,
            "description": "The idCode of the status. Only standard statuses has idCodes set. It is also not permitted to change names for standard statuses",
            "example": "inStock"
          },
          "sortIndex": {
            "type": "integer",
            "description": "Sort index for this status"
          },
          "stockoutNewStatusId": {
            "type": "integer",
            "default": null,
            "example": null,
            "description": "This has to be set to another, existing stock status id, or null. If a product has its quantity changed to negative, the product will then change stock status to the one with this id"
          },
          "productBuyable": {
            "type": "boolean",
            "default": true,
            "example": true,
            "description": "Is the product buyable when this status is set?"
          },
          "inStock": {
            "type": "boolean",
            "default": false,
            "example": false,
            "description": "Should the product be displayed as \"in stock\" when this status is set?"
          },
          "languages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductStockStatusLanguageModel"
            }
          }
        }
      },
      "ProductStockStatusLanguageModel": {
        "type": "object",
        "properties": {
          "langCode": {
            "type": "string",
            "required": true,
            "description": "Language Code (ISO 639-1) for this translation. Has to be a valid lang code that the shop supports. ",
            "minLength": 2,
            "maxLength": 2,
            "example": "sv"
          },
          "name": {
            "type": "string",
            "maxLength": 40,
            "description": "The name of this stock status",
            "example": "My stock status"
          }
        }
      },
      "ProductStockStatusModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProductStockStatusModel"
          }
        }
      },
      "ProductStockStatusModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A list of product stock statuses",
            "items": {
              "$ref": "#/components/schemas/ProductStockStatusModel"
            }
          }
        }
      },
      "ShopModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "example": "My web shop",
            "description": "The shop name"
          },
          "idCode": {
            "type": "string",
            "readOnly": true,
            "example": "myShop",
            "description": "A unique id code for this shop"
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "example": "open",
            "description": "The current status of this shop. Possible values are: open, closed, inactive"
          },
          "defaultLangCode": {
            "type": "string",
            "readOnly": true,
            "example": "sv",
            "description": "Shops default language code"
          },
          "activeLangCodes": {
            "type": "array",
            "readOnly": true,
            "description": "Active languages in shop",
            "items": {
              "type": "string",
              "readOnly": true,
              "minLength": 2,
              "maxLength": 2,
              "description": "Lang code",
              "example": "sv"
            }
          },
          "baseCurrency": {
            "type": "string",
            "readOnly": true,
            "example": "SEK",
            "description": "The shops base currency. All currencies and related data can be fetched using the /currencies endpoint"
          },
          "defaultCustomerCountryCode": {
            "type": "string",
            "readOnly": true,
            "example": "SE",
            "description": "The default customer country"
          },
          "generalDefaultVatRate": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "min": 0,
            "example": 25,
            "description": "The default vat rate for new products"
          },
          "shopCompanyName": {
            "type": "string",
            "readOnly": true,
            "example": "My Company Ltd.",
            "description": "The company running this web shop"
          },
          "shopAddress": {
            "type": "string",
            "readOnly": true,
            "example": "My Street 1",
            "description": "The address to the web shop"
          },
          "shopPostalCode": {
            "type": "string",
            "readOnly": true,
            "example": "100 00",
            "description": "The postal code to the web shop"
          },
          "shopCity": {
            "type": "string",
            "readOnly": true,
            "example": "My Town",
            "description": "The city to the web shop"
          },
          "shopOrgNo": {
            "type": "string",
            "readOnly": true,
            "example": "556677-0000",
            "description": "The business id of the company running the web shop"
          },
          "shopPhoneNo": {
            "type": "string",
            "readOnly": true,
            "example": "040 - 60 20 900",
            "description": "The contact phone number to the web shop"
          },
          "shopVatNo": {
            "type": "string",
            "readOnly": true,
            "example": "SE556677000001",
            "description": "The EU VAT number of the company running the web shop"
          },
          "shopCountryCode": {
            "type": "string",
            "readOnly": true,
            "example": "SE",
            "description": "The country the company behind the web shop resides in"
          }
        }
      },
      "ShopItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ShopModel"
          }
        }
      },
      "ProductVariantAttributeValueModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProductVariantAttributeValueModel"
          }
        }
      },
      "ProductVariantAttributeValueModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of attribute values",
            "items": {
              "$ref": "#/components/schemas/ProductVariantAttributeValueModel"
            }
          }
        }
      },
      "ProductVariantAttributeValueModelUpdatable": {
        "type": "object",
        "properties": {
          "languages": {
            "type": "array",
            "description": "A collection of attribute value languages",
            "items": {
              "$ref": "#/components/schemas/ProductVariantAttributeValueLanguageModel"
            }
          }
        }
      },
      "ProductVariantAttributeValueLanguageModel": {
        "type": "object",
        "properties": {
          "langCode": {
            "type": "string",
            "required": true,
            "description": "The langCode for this language. Supported language codes are: sv, en, no, da, fi, de, fr, es"
          },
          "name": {
            "type": "string",
            "maxLength": 50,
            "required": true,
            "description": "The name of this attribute value"
          }
        }
      },
      "ProductVariantAttributeValueModel": {
        "type": "object",
        "properties": {
          "attributeValueId": {
            "type": "integer",
            "description": "The id for this attribute value"
          },
          "skuSuffix": {
            "type": "string",
            "description": "The suggested suffix for new Variants using this attribute value",
            "example": "W"
          },
          "sortIndex": {
            "type": "integer",
            "min": 0,
            "default": 0,
            "example": 9,
            "description": "The sort order for this attribute value"
          },
          "languages": {
            "type": "array",
            "description": "A collection of attribute value languages",
            "items": {
              "$ref": "#/components/schemas/ProductVariantAttributeValueLanguageModel"
            }
          },
          "attribute": {
            "$ref": "#/components/schemas/ProductVariantAttributeModel"
          }
        }
      },
      "ProductVariantAttributeModelItem": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProductVariantAttributeModel"
          }
        }
      },
      "ProductVariantAttributeModelCollection": {
        "properties": {
          "data": {
            "type": "array",
            "description": "A collection of attribute values",
            "items": {
              "$ref": "#/components/schemas/ProductVariantAttributeModel"
            }
          }
        }
      },
      "ProductVariantAttributeModelUpdatable": {
        "type": "object",
        "properties": {
          "attributeId": {
            "type": "integer",
            "readOnly": true,
            "example": 1
          },
          "languages": {
            "type": "array",
            "description": "A collection of attribute languages",
            "items": {
              "$ref": "#/components/schemas/ProductVariantAttributeLanguageModel"
            }
          }
        }
      },
      "ProductVariantAttributeLanguageModel": {
        "type": "object",
        "properties": {
          "langCode": {
            "type": "string",
            "required": true,
            "description": "The langCode for this language. Supported language codes are: sv, en, no, da, fi, de, fr, es"
          },
          "name": {
            "type": "string",
            "maxLength": 50,
            "required": true,
            "description": "The name of this attribute"
          }
        }
      },
      "ProductVariantAttributeModel": {
        "type": "object",
        "properties": {
          "attributeId": {
            "type": "integer",
            "description": "The id for this attribute"
          },
          "languages": {
            "type": "object",
            "description": "A collection of attribute languages",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductVariantAttributeLanguageModel"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth 2.0 using Client Credentials",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://leksaker.starweb.se/api/v2/token",
            "scopes": {}
          }
        }
      }
    },
    "responses": {
      "ItemDeleted": {
        "description": "Entity deleted"
      },
      "NotFound": {
        "description": "Entity not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      }
    }
  }
}
